// nios_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module nios_mm_interconnect_0 (
		input  wire        pll_c0_clk,                                            //                                          pll_c0.clk
		input  wire        av_wr_master_0_reset_sink_reset_bridge_in_reset_reset, // av_wr_master_0_reset_sink_reset_bridge_in_reset.reset
		input  wire        jtag_uart_reset_reset_bridge_in_reset_reset,           //           jtag_uart_reset_reset_bridge_in_reset.reset
		input  wire        nios2_gen2_reset_reset_bridge_in_reset_reset,          //          nios2_gen2_reset_reset_bridge_in_reset.reset
		input  wire [31:0] av_wr_master_0_avalon_master_address,                  //                    av_wr_master_0_avalon_master.address
		output wire        av_wr_master_0_avalon_master_waitrequest,              //                                                .waitrequest
		input  wire [7:0]  av_wr_master_0_avalon_master_burstcount,               //                                                .burstcount
		input  wire [3:0]  av_wr_master_0_avalon_master_byteenable,               //                                                .byteenable
		input  wire        av_wr_master_0_avalon_master_write,                    //                                                .write
		input  wire [31:0] av_wr_master_0_avalon_master_writedata,                //                                                .writedata
		input  wire [23:0] dma_read_master_address,                               //                                 dma_read_master.address
		output wire        dma_read_master_waitrequest,                           //                                                .waitrequest
		input  wire        dma_read_master_chipselect,                            //                                                .chipselect
		input  wire        dma_read_master_read,                                  //                                                .read
		output wire [31:0] dma_read_master_readdata,                              //                                                .readdata
		output wire        dma_read_master_readdatavalid,                         //                                                .readdatavalid
		input  wire [23:0] dma_write_master_address,                              //                                dma_write_master.address
		output wire        dma_write_master_waitrequest,                          //                                                .waitrequest
		input  wire [3:0]  dma_write_master_byteenable,                           //                                                .byteenable
		input  wire        dma_write_master_chipselect,                           //                                                .chipselect
		input  wire        dma_write_master_write,                                //                                                .write
		input  wire [31:0] dma_write_master_writedata,                            //                                                .writedata
		input  wire [23:0] dma_LCD_read_master_address,                           //                             dma_LCD_read_master.address
		output wire        dma_LCD_read_master_waitrequest,                       //                                                .waitrequest
		input  wire        dma_LCD_read_master_chipselect,                        //                                                .chipselect
		input  wire        dma_LCD_read_master_read,                              //                                                .read
		output wire [15:0] dma_LCD_read_master_readdata,                          //                                                .readdata
		output wire        dma_LCD_read_master_readdatavalid,                     //                                                .readdatavalid
		input  wire [23:0] dma_LCD_write_master_address,                          //                            dma_LCD_write_master.address
		output wire        dma_LCD_write_master_waitrequest,                      //                                                .waitrequest
		input  wire [1:0]  dma_LCD_write_master_byteenable,                       //                                                .byteenable
		input  wire        dma_LCD_write_master_chipselect,                       //                                                .chipselect
		input  wire        dma_LCD_write_master_write,                            //                                                .write
		input  wire [15:0] dma_LCD_write_master_writedata,                        //                                                .writedata
		input  wire [23:0] nios2_gen2_data_master_address,                        //                          nios2_gen2_data_master.address
		output wire        nios2_gen2_data_master_waitrequest,                    //                                                .waitrequest
		input  wire [3:0]  nios2_gen2_data_master_byteenable,                     //                                                .byteenable
		input  wire        nios2_gen2_data_master_read,                           //                                                .read
		output wire [31:0] nios2_gen2_data_master_readdata,                       //                                                .readdata
		input  wire        nios2_gen2_data_master_write,                          //                                                .write
		input  wire [31:0] nios2_gen2_data_master_writedata,                      //                                                .writedata
		input  wire        nios2_gen2_data_master_debugaccess,                    //                                                .debugaccess
		input  wire [23:0] nios2_gen2_instruction_master_address,                 //                   nios2_gen2_instruction_master.address
		output wire        nios2_gen2_instruction_master_waitrequest,             //                                                .waitrequest
		input  wire        nios2_gen2_instruction_master_read,                    //                                                .read
		output wire [31:0] nios2_gen2_instruction_master_readdata,                //                                                .readdata
		output wire [1:0]  button_s1_address,                                     //                                       button_s1.address
		input  wire [31:0] button_s1_readdata,                                    //                                                .readdata
		output wire [1:0]  DEBport_s1_address,                                    //                                      DEBport_s1.address
		output wire        DEBport_s1_write,                                      //                                                .write
		input  wire [31:0] DEBport_s1_readdata,                                   //                                                .readdata
		output wire [31:0] DEBport_s1_writedata,                                  //                                                .writedata
		output wire        DEBport_s1_chipselect,                                 //                                                .chipselect
		output wire [2:0]  dma_control_port_slave_address,                        //                          dma_control_port_slave.address
		output wire        dma_control_port_slave_write,                          //                                                .write
		input  wire [23:0] dma_control_port_slave_readdata,                       //                                                .readdata
		output wire [23:0] dma_control_port_slave_writedata,                      //                                                .writedata
		output wire        dma_control_port_slave_chipselect,                     //                                                .chipselect
		output wire [2:0]  dma_LCD_control_port_slave_address,                    //                      dma_LCD_control_port_slave.address
		output wire        dma_LCD_control_port_slave_write,                      //                                                .write
		input  wire [23:0] dma_LCD_control_port_slave_readdata,                   //                                                .readdata
		output wire [23:0] dma_LCD_control_port_slave_writedata,                  //                                                .writedata
		output wire        dma_LCD_control_port_slave_chipselect,                 //                                                .chipselect
		output wire [2:0]  ft245_avalon_slave_address,                            //                              ft245_avalon_slave.address
		output wire        ft245_avalon_slave_write,                              //                                                .write
		output wire        ft245_avalon_slave_read,                               //                                                .read
		input  wire [31:0] ft245_avalon_slave_readdata,                           //                                                .readdata
		output wire [31:0] ft245_avalon_slave_writedata,                          //                                                .writedata
		output wire [3:0]  ft245_avalon_slave_byteenable,                         //                                                .byteenable
		input  wire        ft245_avalon_slave_waitrequest,                        //                                                .waitrequest
		output wire        ft245_avalon_slave_chipselect,                         //                                                .chipselect
		output wire [1:0]  ILI9341SPI_a_slave_address,                            //                              ILI9341SPI_a_slave.address
		output wire        ILI9341SPI_a_slave_write,                              //                                                .write
		output wire [31:0] ILI9341SPI_a_slave_writedata,                          //                                                .writedata
		output wire [3:0]  ILI9341SPI_a_slave_byteenable,                         //                                                .byteenable
		input  wire        ILI9341SPI_a_slave_waitrequest,                        //                                                .waitrequest
		output wire        ILI9341SPI_a_slave_chipselect,                         //                                                .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                   //                     jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                     //                                                .write
		output wire        jtag_uart_avalon_jtag_slave_read,                      //                                                .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                  //                                                .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                 //                                                .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,               //                                                .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                //                                                .chipselect
		output wire [1:0]  LED_s1_address,                                        //                                          LED_s1.address
		output wire        LED_s1_write,                                          //                                                .write
		input  wire [31:0] LED_s1_readdata,                                       //                                                .readdata
		output wire [31:0] LED_s1_writedata,                                      //                                                .writedata
		output wire        LED_s1_chipselect,                                     //                                                .chipselect
		output wire [8:0]  nios2_gen2_debug_mem_slave_address,                    //                      nios2_gen2_debug_mem_slave.address
		output wire        nios2_gen2_debug_mem_slave_write,                      //                                                .write
		output wire        nios2_gen2_debug_mem_slave_read,                       //                                                .read
		input  wire [31:0] nios2_gen2_debug_mem_slave_readdata,                   //                                                .readdata
		output wire [31:0] nios2_gen2_debug_mem_slave_writedata,                  //                                                .writedata
		output wire [3:0]  nios2_gen2_debug_mem_slave_byteenable,                 //                                                .byteenable
		input  wire        nios2_gen2_debug_mem_slave_waitrequest,                //                                                .waitrequest
		output wire        nios2_gen2_debug_mem_slave_debugaccess,                //                                                .debugaccess
		output wire [12:0] onchip_flash_data_address,                             //                               onchip_flash_data.address
		output wire        onchip_flash_data_write,                               //                                                .write
		output wire        onchip_flash_data_read,                                //                                                .read
		input  wire [31:0] onchip_flash_data_readdata,                            //                                                .readdata
		output wire [31:0] onchip_flash_data_writedata,                           //                                                .writedata
		output wire [3:0]  onchip_flash_data_burstcount,                          //                                                .burstcount
		input  wire        onchip_flash_data_readdatavalid,                       //                                                .readdatavalid
		input  wire        onchip_flash_data_waitrequest,                         //                                                .waitrequest
		output wire [9:0]  pdm_s0_address,                                        //                                          pdm_s0.address
		output wire        pdm_s0_write,                                          //                                                .write
		output wire        pdm_s0_read,                                           //                                                .read
		input  wire [31:0] pdm_s0_readdata,                                       //                                                .readdata
		output wire [31:0] pdm_s0_writedata,                                      //                                                .writedata
		output wire [3:0]  pdm_s0_byteenable,                                     //                                                .byteenable
		output wire        pdm_s0_chipselect,                                     //                                                .chipselect
		output wire [21:0] sdram_s1_address,                                      //                                        sdram_s1.address
		output wire        sdram_s1_write,                                        //                                                .write
		output wire        sdram_s1_read,                                         //                                                .read
		input  wire [15:0] sdram_s1_readdata,                                     //                                                .readdata
		output wire [15:0] sdram_s1_writedata,                                    //                                                .writedata
		output wire [1:0]  sdram_s1_byteenable,                                   //                                                .byteenable
		input  wire        sdram_s1_readdatavalid,                                //                                                .readdatavalid
		input  wire        sdram_s1_waitrequest,                                  //                                                .waitrequest
		output wire        sdram_s1_chipselect,                                   //                                                .chipselect
		output wire [8:0]  serialflash_epcs_control_port_address,                 //                   serialflash_epcs_control_port.address
		output wire        serialflash_epcs_control_port_write,                   //                                                .write
		output wire        serialflash_epcs_control_port_read,                    //                                                .read
		input  wire [31:0] serialflash_epcs_control_port_readdata,                //                                                .readdata
		output wire [31:0] serialflash_epcs_control_port_writedata,               //                                                .writedata
		output wire        serialflash_epcs_control_port_chipselect,              //                                                .chipselect
		output wire [2:0]  sys_clk_timer_s1_address,                              //                                sys_clk_timer_s1.address
		output wire        sys_clk_timer_s1_write,                                //                                                .write
		input  wire [15:0] sys_clk_timer_s1_readdata,                             //                                                .readdata
		output wire [15:0] sys_clk_timer_s1_writedata,                            //                                                .writedata
		output wire        sys_clk_timer_s1_chipselect,                           //                                                .chipselect
		output wire [0:0]  sysid_control_slave_address,                           //                             sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata                           //                                                .readdata
	);

	wire          av_wr_master_0_avalon_master_translator_avalon_universal_master_0_waitrequest;    // av_wr_master_0_avalon_master_agent:av_waitrequest -> av_wr_master_0_avalon_master_translator:uav_waitrequest
	wire   [31:0] av_wr_master_0_avalon_master_translator_avalon_universal_master_0_readdata;       // av_wr_master_0_avalon_master_agent:av_readdata -> av_wr_master_0_avalon_master_translator:uav_readdata
	wire          av_wr_master_0_avalon_master_translator_avalon_universal_master_0_debugaccess;    // av_wr_master_0_avalon_master_translator:uav_debugaccess -> av_wr_master_0_avalon_master_agent:av_debugaccess
	wire   [31:0] av_wr_master_0_avalon_master_translator_avalon_universal_master_0_address;        // av_wr_master_0_avalon_master_translator:uav_address -> av_wr_master_0_avalon_master_agent:av_address
	wire          av_wr_master_0_avalon_master_translator_avalon_universal_master_0_read;           // av_wr_master_0_avalon_master_translator:uav_read -> av_wr_master_0_avalon_master_agent:av_read
	wire    [3:0] av_wr_master_0_avalon_master_translator_avalon_universal_master_0_byteenable;     // av_wr_master_0_avalon_master_translator:uav_byteenable -> av_wr_master_0_avalon_master_agent:av_byteenable
	wire          av_wr_master_0_avalon_master_translator_avalon_universal_master_0_readdatavalid;  // av_wr_master_0_avalon_master_agent:av_readdatavalid -> av_wr_master_0_avalon_master_translator:uav_readdatavalid
	wire          av_wr_master_0_avalon_master_translator_avalon_universal_master_0_lock;           // av_wr_master_0_avalon_master_translator:uav_lock -> av_wr_master_0_avalon_master_agent:av_lock
	wire          av_wr_master_0_avalon_master_translator_avalon_universal_master_0_write;          // av_wr_master_0_avalon_master_translator:uav_write -> av_wr_master_0_avalon_master_agent:av_write
	wire   [31:0] av_wr_master_0_avalon_master_translator_avalon_universal_master_0_writedata;      // av_wr_master_0_avalon_master_translator:uav_writedata -> av_wr_master_0_avalon_master_agent:av_writedata
	wire    [9:0] av_wr_master_0_avalon_master_translator_avalon_universal_master_0_burstcount;     // av_wr_master_0_avalon_master_translator:uav_burstcount -> av_wr_master_0_avalon_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> av_wr_master_0_avalon_master_agent:rp_valid
	wire  [116:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> av_wr_master_0_avalon_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                // av_wr_master_0_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [14:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> av_wr_master_0_avalon_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> av_wr_master_0_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> av_wr_master_0_avalon_master_agent:rp_endofpacket
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_data_master_agent:av_waitrequest -> nios2_gen2_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_data_master_agent:av_readdata -> nios2_gen2_data_master_translator:uav_readdata
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_data_master_translator:uav_debugaccess -> nios2_gen2_data_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_data_master_translator:uav_address -> nios2_gen2_data_master_agent:av_address
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_data_master_translator:uav_read -> nios2_gen2_data_master_agent:av_read
	wire    [3:0] nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_data_master_translator:uav_byteenable -> nios2_gen2_data_master_agent:av_byteenable
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_data_master_agent:av_readdatavalid -> nios2_gen2_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_data_master_translator:uav_lock -> nios2_gen2_data_master_agent:av_lock
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_data_master_translator:uav_write -> nios2_gen2_data_master_agent:av_write
	wire   [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_data_master_translator:uav_writedata -> nios2_gen2_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_data_master_translator:uav_burstcount -> nios2_gen2_data_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                            // rsp_mux_001:src_valid -> nios2_gen2_data_master_agent:rp_valid
	wire  [116:0] rsp_mux_001_src_data;                                                             // rsp_mux_001:src_data -> nios2_gen2_data_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                            // nios2_gen2_data_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [14:0] rsp_mux_001_src_channel;                                                          // rsp_mux_001:src_channel -> nios2_gen2_data_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                    // rsp_mux_001:src_startofpacket -> nios2_gen2_data_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                      // rsp_mux_001:src_endofpacket -> nios2_gen2_data_master_agent:rp_endofpacket
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_instruction_master_agent:av_waitrequest -> nios2_gen2_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_instruction_master_agent:av_readdata -> nios2_gen2_instruction_master_translator:uav_readdata
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_instruction_master_translator:uav_debugaccess -> nios2_gen2_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_instruction_master_translator:uav_address -> nios2_gen2_instruction_master_agent:av_address
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_instruction_master_translator:uav_read -> nios2_gen2_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_instruction_master_translator:uav_byteenable -> nios2_gen2_instruction_master_agent:av_byteenable
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_instruction_master_agent:av_readdatavalid -> nios2_gen2_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_instruction_master_translator:uav_lock -> nios2_gen2_instruction_master_agent:av_lock
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_instruction_master_translator:uav_write -> nios2_gen2_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_instruction_master_translator:uav_writedata -> nios2_gen2_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_instruction_master_translator:uav_burstcount -> nios2_gen2_instruction_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                            // rsp_mux_002:src_valid -> nios2_gen2_instruction_master_agent:rp_valid
	wire  [116:0] rsp_mux_002_src_data;                                                             // rsp_mux_002:src_data -> nios2_gen2_instruction_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                            // nios2_gen2_instruction_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [14:0] rsp_mux_002_src_channel;                                                          // rsp_mux_002:src_channel -> nios2_gen2_instruction_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                    // rsp_mux_002:src_startofpacket -> nios2_gen2_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                      // rsp_mux_002:src_endofpacket -> nios2_gen2_instruction_master_agent:rp_endofpacket
	wire          dma_read_master_translator_avalon_universal_master_0_waitrequest;                 // dma_read_master_agent:av_waitrequest -> dma_read_master_translator:uav_waitrequest
	wire   [31:0] dma_read_master_translator_avalon_universal_master_0_readdata;                    // dma_read_master_agent:av_readdata -> dma_read_master_translator:uav_readdata
	wire          dma_read_master_translator_avalon_universal_master_0_debugaccess;                 // dma_read_master_translator:uav_debugaccess -> dma_read_master_agent:av_debugaccess
	wire   [31:0] dma_read_master_translator_avalon_universal_master_0_address;                     // dma_read_master_translator:uav_address -> dma_read_master_agent:av_address
	wire          dma_read_master_translator_avalon_universal_master_0_read;                        // dma_read_master_translator:uav_read -> dma_read_master_agent:av_read
	wire    [3:0] dma_read_master_translator_avalon_universal_master_0_byteenable;                  // dma_read_master_translator:uav_byteenable -> dma_read_master_agent:av_byteenable
	wire          dma_read_master_translator_avalon_universal_master_0_readdatavalid;               // dma_read_master_agent:av_readdatavalid -> dma_read_master_translator:uav_readdatavalid
	wire          dma_read_master_translator_avalon_universal_master_0_lock;                        // dma_read_master_translator:uav_lock -> dma_read_master_agent:av_lock
	wire          dma_read_master_translator_avalon_universal_master_0_write;                       // dma_read_master_translator:uav_write -> dma_read_master_agent:av_write
	wire   [31:0] dma_read_master_translator_avalon_universal_master_0_writedata;                   // dma_read_master_translator:uav_writedata -> dma_read_master_agent:av_writedata
	wire    [2:0] dma_read_master_translator_avalon_universal_master_0_burstcount;                  // dma_read_master_translator:uav_burstcount -> dma_read_master_agent:av_burstcount
	wire          dma_lcd_read_master_translator_avalon_universal_master_0_waitrequest;             // dma_LCD_read_master_agent:av_waitrequest -> dma_LCD_read_master_translator:uav_waitrequest
	wire   [15:0] dma_lcd_read_master_translator_avalon_universal_master_0_readdata;                // dma_LCD_read_master_agent:av_readdata -> dma_LCD_read_master_translator:uav_readdata
	wire          dma_lcd_read_master_translator_avalon_universal_master_0_debugaccess;             // dma_LCD_read_master_translator:uav_debugaccess -> dma_LCD_read_master_agent:av_debugaccess
	wire   [31:0] dma_lcd_read_master_translator_avalon_universal_master_0_address;                 // dma_LCD_read_master_translator:uav_address -> dma_LCD_read_master_agent:av_address
	wire          dma_lcd_read_master_translator_avalon_universal_master_0_read;                    // dma_LCD_read_master_translator:uav_read -> dma_LCD_read_master_agent:av_read
	wire    [1:0] dma_lcd_read_master_translator_avalon_universal_master_0_byteenable;              // dma_LCD_read_master_translator:uav_byteenable -> dma_LCD_read_master_agent:av_byteenable
	wire          dma_lcd_read_master_translator_avalon_universal_master_0_readdatavalid;           // dma_LCD_read_master_agent:av_readdatavalid -> dma_LCD_read_master_translator:uav_readdatavalid
	wire          dma_lcd_read_master_translator_avalon_universal_master_0_lock;                    // dma_LCD_read_master_translator:uav_lock -> dma_LCD_read_master_agent:av_lock
	wire          dma_lcd_read_master_translator_avalon_universal_master_0_write;                   // dma_LCD_read_master_translator:uav_write -> dma_LCD_read_master_agent:av_write
	wire   [15:0] dma_lcd_read_master_translator_avalon_universal_master_0_writedata;               // dma_LCD_read_master_translator:uav_writedata -> dma_LCD_read_master_agent:av_writedata
	wire    [1:0] dma_lcd_read_master_translator_avalon_universal_master_0_burstcount;              // dma_LCD_read_master_translator:uav_burstcount -> dma_LCD_read_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                            // rsp_mux_004:src_valid -> dma_LCD_read_master_agent:rp_valid
	wire   [98:0] rsp_mux_004_src_data;                                                             // rsp_mux_004:src_data -> dma_LCD_read_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                            // dma_LCD_read_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [14:0] rsp_mux_004_src_channel;                                                          // rsp_mux_004:src_channel -> dma_LCD_read_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                    // rsp_mux_004:src_startofpacket -> dma_LCD_read_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                      // rsp_mux_004:src_endofpacket -> dma_LCD_read_master_agent:rp_endofpacket
	wire          dma_write_master_translator_avalon_universal_master_0_waitrequest;                // dma_write_master_agent:av_waitrequest -> dma_write_master_translator:uav_waitrequest
	wire   [31:0] dma_write_master_translator_avalon_universal_master_0_readdata;                   // dma_write_master_agent:av_readdata -> dma_write_master_translator:uav_readdata
	wire          dma_write_master_translator_avalon_universal_master_0_debugaccess;                // dma_write_master_translator:uav_debugaccess -> dma_write_master_agent:av_debugaccess
	wire   [31:0] dma_write_master_translator_avalon_universal_master_0_address;                    // dma_write_master_translator:uav_address -> dma_write_master_agent:av_address
	wire          dma_write_master_translator_avalon_universal_master_0_read;                       // dma_write_master_translator:uav_read -> dma_write_master_agent:av_read
	wire    [3:0] dma_write_master_translator_avalon_universal_master_0_byteenable;                 // dma_write_master_translator:uav_byteenable -> dma_write_master_agent:av_byteenable
	wire          dma_write_master_translator_avalon_universal_master_0_readdatavalid;              // dma_write_master_agent:av_readdatavalid -> dma_write_master_translator:uav_readdatavalid
	wire          dma_write_master_translator_avalon_universal_master_0_lock;                       // dma_write_master_translator:uav_lock -> dma_write_master_agent:av_lock
	wire          dma_write_master_translator_avalon_universal_master_0_write;                      // dma_write_master_translator:uav_write -> dma_write_master_agent:av_write
	wire   [31:0] dma_write_master_translator_avalon_universal_master_0_writedata;                  // dma_write_master_translator:uav_writedata -> dma_write_master_agent:av_writedata
	wire    [2:0] dma_write_master_translator_avalon_universal_master_0_burstcount;                 // dma_write_master_translator:uav_burstcount -> dma_write_master_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                            // rsp_mux_005:src_valid -> dma_write_master_agent:rp_valid
	wire  [116:0] rsp_mux_005_src_data;                                                             // rsp_mux_005:src_data -> dma_write_master_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                            // dma_write_master_agent:rp_ready -> rsp_mux_005:src_ready
	wire   [14:0] rsp_mux_005_src_channel;                                                          // rsp_mux_005:src_channel -> dma_write_master_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                    // rsp_mux_005:src_startofpacket -> dma_write_master_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                      // rsp_mux_005:src_endofpacket -> dma_write_master_agent:rp_endofpacket
	wire          dma_lcd_write_master_translator_avalon_universal_master_0_waitrequest;            // dma_LCD_write_master_agent:av_waitrequest -> dma_LCD_write_master_translator:uav_waitrequest
	wire   [15:0] dma_lcd_write_master_translator_avalon_universal_master_0_readdata;               // dma_LCD_write_master_agent:av_readdata -> dma_LCD_write_master_translator:uav_readdata
	wire          dma_lcd_write_master_translator_avalon_universal_master_0_debugaccess;            // dma_LCD_write_master_translator:uav_debugaccess -> dma_LCD_write_master_agent:av_debugaccess
	wire   [31:0] dma_lcd_write_master_translator_avalon_universal_master_0_address;                // dma_LCD_write_master_translator:uav_address -> dma_LCD_write_master_agent:av_address
	wire          dma_lcd_write_master_translator_avalon_universal_master_0_read;                   // dma_LCD_write_master_translator:uav_read -> dma_LCD_write_master_agent:av_read
	wire    [1:0] dma_lcd_write_master_translator_avalon_universal_master_0_byteenable;             // dma_LCD_write_master_translator:uav_byteenable -> dma_LCD_write_master_agent:av_byteenable
	wire          dma_lcd_write_master_translator_avalon_universal_master_0_readdatavalid;          // dma_LCD_write_master_agent:av_readdatavalid -> dma_LCD_write_master_translator:uav_readdatavalid
	wire          dma_lcd_write_master_translator_avalon_universal_master_0_lock;                   // dma_LCD_write_master_translator:uav_lock -> dma_LCD_write_master_agent:av_lock
	wire          dma_lcd_write_master_translator_avalon_universal_master_0_write;                  // dma_LCD_write_master_translator:uav_write -> dma_LCD_write_master_agent:av_write
	wire   [15:0] dma_lcd_write_master_translator_avalon_universal_master_0_writedata;              // dma_LCD_write_master_translator:uav_writedata -> dma_LCD_write_master_agent:av_writedata
	wire    [1:0] dma_lcd_write_master_translator_avalon_universal_master_0_burstcount;             // dma_LCD_write_master_translator:uav_burstcount -> dma_LCD_write_master_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                            // rsp_mux_006:src_valid -> dma_LCD_write_master_agent:rp_valid
	wire   [98:0] rsp_mux_006_src_data;                                                             // rsp_mux_006:src_data -> dma_LCD_write_master_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                            // dma_LCD_write_master_agent:rp_ready -> rsp_mux_006:src_ready
	wire   [14:0] rsp_mux_006_src_channel;                                                          // rsp_mux_006:src_channel -> dma_LCD_write_master_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                    // rsp_mux_006:src_startofpacket -> dma_LCD_write_master_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                      // rsp_mux_006:src_endofpacket -> dma_LCD_write_master_agent:rp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                       // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                    // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                    // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                        // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                     // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                           // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                  // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                           // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                      // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                          // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                     // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                   // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire   [99:0] sdram_s1_agent_rf_source_data;                                                    // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                   // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                           // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                             // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire   [99:0] sdram_s1_agent_rsp_fifo_out_data;                                                 // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                        // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                          // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                              // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                               // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                              // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ili9341spi_a_slave_agent_m0_readdata;                                             // ILI9341SPI_a_slave_translator:uav_readdata -> ILI9341SPI_a_slave_agent:m0_readdata
	wire          ili9341spi_a_slave_agent_m0_waitrequest;                                          // ILI9341SPI_a_slave_translator:uav_waitrequest -> ILI9341SPI_a_slave_agent:m0_waitrequest
	wire          ili9341spi_a_slave_agent_m0_debugaccess;                                          // ILI9341SPI_a_slave_agent:m0_debugaccess -> ILI9341SPI_a_slave_translator:uav_debugaccess
	wire   [31:0] ili9341spi_a_slave_agent_m0_address;                                              // ILI9341SPI_a_slave_agent:m0_address -> ILI9341SPI_a_slave_translator:uav_address
	wire    [3:0] ili9341spi_a_slave_agent_m0_byteenable;                                           // ILI9341SPI_a_slave_agent:m0_byteenable -> ILI9341SPI_a_slave_translator:uav_byteenable
	wire          ili9341spi_a_slave_agent_m0_read;                                                 // ILI9341SPI_a_slave_agent:m0_read -> ILI9341SPI_a_slave_translator:uav_read
	wire          ili9341spi_a_slave_agent_m0_readdatavalid;                                        // ILI9341SPI_a_slave_translator:uav_readdatavalid -> ILI9341SPI_a_slave_agent:m0_readdatavalid
	wire          ili9341spi_a_slave_agent_m0_lock;                                                 // ILI9341SPI_a_slave_agent:m0_lock -> ILI9341SPI_a_slave_translator:uav_lock
	wire   [31:0] ili9341spi_a_slave_agent_m0_writedata;                                            // ILI9341SPI_a_slave_agent:m0_writedata -> ILI9341SPI_a_slave_translator:uav_writedata
	wire          ili9341spi_a_slave_agent_m0_write;                                                // ILI9341SPI_a_slave_agent:m0_write -> ILI9341SPI_a_slave_translator:uav_write
	wire    [2:0] ili9341spi_a_slave_agent_m0_burstcount;                                           // ILI9341SPI_a_slave_agent:m0_burstcount -> ILI9341SPI_a_slave_translator:uav_burstcount
	wire          ili9341spi_a_slave_agent_rf_source_valid;                                         // ILI9341SPI_a_slave_agent:rf_source_valid -> ILI9341SPI_a_slave_agent_rsp_fifo:in_valid
	wire  [117:0] ili9341spi_a_slave_agent_rf_source_data;                                          // ILI9341SPI_a_slave_agent:rf_source_data -> ILI9341SPI_a_slave_agent_rsp_fifo:in_data
	wire          ili9341spi_a_slave_agent_rf_source_ready;                                         // ILI9341SPI_a_slave_agent_rsp_fifo:in_ready -> ILI9341SPI_a_slave_agent:rf_source_ready
	wire          ili9341spi_a_slave_agent_rf_source_startofpacket;                                 // ILI9341SPI_a_slave_agent:rf_source_startofpacket -> ILI9341SPI_a_slave_agent_rsp_fifo:in_startofpacket
	wire          ili9341spi_a_slave_agent_rf_source_endofpacket;                                   // ILI9341SPI_a_slave_agent:rf_source_endofpacket -> ILI9341SPI_a_slave_agent_rsp_fifo:in_endofpacket
	wire          ili9341spi_a_slave_agent_rsp_fifo_out_valid;                                      // ILI9341SPI_a_slave_agent_rsp_fifo:out_valid -> ILI9341SPI_a_slave_agent:rf_sink_valid
	wire  [117:0] ili9341spi_a_slave_agent_rsp_fifo_out_data;                                       // ILI9341SPI_a_slave_agent_rsp_fifo:out_data -> ILI9341SPI_a_slave_agent:rf_sink_data
	wire          ili9341spi_a_slave_agent_rsp_fifo_out_ready;                                      // ILI9341SPI_a_slave_agent:rf_sink_ready -> ILI9341SPI_a_slave_agent_rsp_fifo:out_ready
	wire          ili9341spi_a_slave_agent_rsp_fifo_out_startofpacket;                              // ILI9341SPI_a_slave_agent_rsp_fifo:out_startofpacket -> ILI9341SPI_a_slave_agent:rf_sink_startofpacket
	wire          ili9341spi_a_slave_agent_rsp_fifo_out_endofpacket;                                // ILI9341SPI_a_slave_agent_rsp_fifo:out_endofpacket -> ILI9341SPI_a_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> ILI9341SPI_a_slave_agent:cp_valid
	wire  [116:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> ILI9341SPI_a_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                            // ILI9341SPI_a_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [14:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> ILI9341SPI_a_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> ILI9341SPI_a_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> ILI9341SPI_a_slave_agent:cp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [117:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [117:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [116:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                            // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [14:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] ft245_avalon_slave_agent_m0_readdata;                                             // ft245_avalon_slave_translator:uav_readdata -> ft245_avalon_slave_agent:m0_readdata
	wire          ft245_avalon_slave_agent_m0_waitrequest;                                          // ft245_avalon_slave_translator:uav_waitrequest -> ft245_avalon_slave_agent:m0_waitrequest
	wire          ft245_avalon_slave_agent_m0_debugaccess;                                          // ft245_avalon_slave_agent:m0_debugaccess -> ft245_avalon_slave_translator:uav_debugaccess
	wire   [31:0] ft245_avalon_slave_agent_m0_address;                                              // ft245_avalon_slave_agent:m0_address -> ft245_avalon_slave_translator:uav_address
	wire    [3:0] ft245_avalon_slave_agent_m0_byteenable;                                           // ft245_avalon_slave_agent:m0_byteenable -> ft245_avalon_slave_translator:uav_byteenable
	wire          ft245_avalon_slave_agent_m0_read;                                                 // ft245_avalon_slave_agent:m0_read -> ft245_avalon_slave_translator:uav_read
	wire          ft245_avalon_slave_agent_m0_readdatavalid;                                        // ft245_avalon_slave_translator:uav_readdatavalid -> ft245_avalon_slave_agent:m0_readdatavalid
	wire          ft245_avalon_slave_agent_m0_lock;                                                 // ft245_avalon_slave_agent:m0_lock -> ft245_avalon_slave_translator:uav_lock
	wire   [31:0] ft245_avalon_slave_agent_m0_writedata;                                            // ft245_avalon_slave_agent:m0_writedata -> ft245_avalon_slave_translator:uav_writedata
	wire          ft245_avalon_slave_agent_m0_write;                                                // ft245_avalon_slave_agent:m0_write -> ft245_avalon_slave_translator:uav_write
	wire    [2:0] ft245_avalon_slave_agent_m0_burstcount;                                           // ft245_avalon_slave_agent:m0_burstcount -> ft245_avalon_slave_translator:uav_burstcount
	wire          ft245_avalon_slave_agent_rf_source_valid;                                         // ft245_avalon_slave_agent:rf_source_valid -> ft245_avalon_slave_agent_rsp_fifo:in_valid
	wire  [117:0] ft245_avalon_slave_agent_rf_source_data;                                          // ft245_avalon_slave_agent:rf_source_data -> ft245_avalon_slave_agent_rsp_fifo:in_data
	wire          ft245_avalon_slave_agent_rf_source_ready;                                         // ft245_avalon_slave_agent_rsp_fifo:in_ready -> ft245_avalon_slave_agent:rf_source_ready
	wire          ft245_avalon_slave_agent_rf_source_startofpacket;                                 // ft245_avalon_slave_agent:rf_source_startofpacket -> ft245_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          ft245_avalon_slave_agent_rf_source_endofpacket;                                   // ft245_avalon_slave_agent:rf_source_endofpacket -> ft245_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          ft245_avalon_slave_agent_rsp_fifo_out_valid;                                      // ft245_avalon_slave_agent_rsp_fifo:out_valid -> ft245_avalon_slave_agent:rf_sink_valid
	wire  [117:0] ft245_avalon_slave_agent_rsp_fifo_out_data;                                       // ft245_avalon_slave_agent_rsp_fifo:out_data -> ft245_avalon_slave_agent:rf_sink_data
	wire          ft245_avalon_slave_agent_rsp_fifo_out_ready;                                      // ft245_avalon_slave_agent:rf_sink_ready -> ft245_avalon_slave_agent_rsp_fifo:out_ready
	wire          ft245_avalon_slave_agent_rsp_fifo_out_startofpacket;                              // ft245_avalon_slave_agent_rsp_fifo:out_startofpacket -> ft245_avalon_slave_agent:rf_sink_startofpacket
	wire          ft245_avalon_slave_agent_rsp_fifo_out_endofpacket;                                // ft245_avalon_slave_agent_rsp_fifo:out_endofpacket -> ft245_avalon_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> ft245_avalon_slave_agent:cp_valid
	wire  [116:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> ft245_avalon_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                            // ft245_avalon_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [14:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> ft245_avalon_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> ft245_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> ft245_avalon_slave_agent:cp_endofpacket
	wire   [31:0] dma_control_port_slave_agent_m0_readdata;                                         // dma_control_port_slave_translator:uav_readdata -> dma_control_port_slave_agent:m0_readdata
	wire          dma_control_port_slave_agent_m0_waitrequest;                                      // dma_control_port_slave_translator:uav_waitrequest -> dma_control_port_slave_agent:m0_waitrequest
	wire          dma_control_port_slave_agent_m0_debugaccess;                                      // dma_control_port_slave_agent:m0_debugaccess -> dma_control_port_slave_translator:uav_debugaccess
	wire   [31:0] dma_control_port_slave_agent_m0_address;                                          // dma_control_port_slave_agent:m0_address -> dma_control_port_slave_translator:uav_address
	wire    [3:0] dma_control_port_slave_agent_m0_byteenable;                                       // dma_control_port_slave_agent:m0_byteenable -> dma_control_port_slave_translator:uav_byteenable
	wire          dma_control_port_slave_agent_m0_read;                                             // dma_control_port_slave_agent:m0_read -> dma_control_port_slave_translator:uav_read
	wire          dma_control_port_slave_agent_m0_readdatavalid;                                    // dma_control_port_slave_translator:uav_readdatavalid -> dma_control_port_slave_agent:m0_readdatavalid
	wire          dma_control_port_slave_agent_m0_lock;                                             // dma_control_port_slave_agent:m0_lock -> dma_control_port_slave_translator:uav_lock
	wire   [31:0] dma_control_port_slave_agent_m0_writedata;                                        // dma_control_port_slave_agent:m0_writedata -> dma_control_port_slave_translator:uav_writedata
	wire          dma_control_port_slave_agent_m0_write;                                            // dma_control_port_slave_agent:m0_write -> dma_control_port_slave_translator:uav_write
	wire    [2:0] dma_control_port_slave_agent_m0_burstcount;                                       // dma_control_port_slave_agent:m0_burstcount -> dma_control_port_slave_translator:uav_burstcount
	wire          dma_control_port_slave_agent_rf_source_valid;                                     // dma_control_port_slave_agent:rf_source_valid -> dma_control_port_slave_agent_rsp_fifo:in_valid
	wire  [117:0] dma_control_port_slave_agent_rf_source_data;                                      // dma_control_port_slave_agent:rf_source_data -> dma_control_port_slave_agent_rsp_fifo:in_data
	wire          dma_control_port_slave_agent_rf_source_ready;                                     // dma_control_port_slave_agent_rsp_fifo:in_ready -> dma_control_port_slave_agent:rf_source_ready
	wire          dma_control_port_slave_agent_rf_source_startofpacket;                             // dma_control_port_slave_agent:rf_source_startofpacket -> dma_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_control_port_slave_agent_rf_source_endofpacket;                               // dma_control_port_slave_agent:rf_source_endofpacket -> dma_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_control_port_slave_agent_rsp_fifo_out_valid;                                  // dma_control_port_slave_agent_rsp_fifo:out_valid -> dma_control_port_slave_agent:rf_sink_valid
	wire  [117:0] dma_control_port_slave_agent_rsp_fifo_out_data;                                   // dma_control_port_slave_agent_rsp_fifo:out_data -> dma_control_port_slave_agent:rf_sink_data
	wire          dma_control_port_slave_agent_rsp_fifo_out_ready;                                  // dma_control_port_slave_agent:rf_sink_ready -> dma_control_port_slave_agent_rsp_fifo:out_ready
	wire          dma_control_port_slave_agent_rsp_fifo_out_startofpacket;                          // dma_control_port_slave_agent_rsp_fifo:out_startofpacket -> dma_control_port_slave_agent:rf_sink_startofpacket
	wire          dma_control_port_slave_agent_rsp_fifo_out_endofpacket;                            // dma_control_port_slave_agent_rsp_fifo:out_endofpacket -> dma_control_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                            // cmd_mux_004:src_valid -> dma_control_port_slave_agent:cp_valid
	wire  [116:0] cmd_mux_004_src_data;                                                             // cmd_mux_004:src_data -> dma_control_port_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                            // dma_control_port_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [14:0] cmd_mux_004_src_channel;                                                          // cmd_mux_004:src_channel -> dma_control_port_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                    // cmd_mux_004:src_startofpacket -> dma_control_port_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                      // cmd_mux_004:src_endofpacket -> dma_control_port_slave_agent:cp_endofpacket
	wire   [31:0] dma_lcd_control_port_slave_agent_m0_readdata;                                     // dma_LCD_control_port_slave_translator:uav_readdata -> dma_LCD_control_port_slave_agent:m0_readdata
	wire          dma_lcd_control_port_slave_agent_m0_waitrequest;                                  // dma_LCD_control_port_slave_translator:uav_waitrequest -> dma_LCD_control_port_slave_agent:m0_waitrequest
	wire          dma_lcd_control_port_slave_agent_m0_debugaccess;                                  // dma_LCD_control_port_slave_agent:m0_debugaccess -> dma_LCD_control_port_slave_translator:uav_debugaccess
	wire   [31:0] dma_lcd_control_port_slave_agent_m0_address;                                      // dma_LCD_control_port_slave_agent:m0_address -> dma_LCD_control_port_slave_translator:uav_address
	wire    [3:0] dma_lcd_control_port_slave_agent_m0_byteenable;                                   // dma_LCD_control_port_slave_agent:m0_byteenable -> dma_LCD_control_port_slave_translator:uav_byteenable
	wire          dma_lcd_control_port_slave_agent_m0_read;                                         // dma_LCD_control_port_slave_agent:m0_read -> dma_LCD_control_port_slave_translator:uav_read
	wire          dma_lcd_control_port_slave_agent_m0_readdatavalid;                                // dma_LCD_control_port_slave_translator:uav_readdatavalid -> dma_LCD_control_port_slave_agent:m0_readdatavalid
	wire          dma_lcd_control_port_slave_agent_m0_lock;                                         // dma_LCD_control_port_slave_agent:m0_lock -> dma_LCD_control_port_slave_translator:uav_lock
	wire   [31:0] dma_lcd_control_port_slave_agent_m0_writedata;                                    // dma_LCD_control_port_slave_agent:m0_writedata -> dma_LCD_control_port_slave_translator:uav_writedata
	wire          dma_lcd_control_port_slave_agent_m0_write;                                        // dma_LCD_control_port_slave_agent:m0_write -> dma_LCD_control_port_slave_translator:uav_write
	wire    [2:0] dma_lcd_control_port_slave_agent_m0_burstcount;                                   // dma_LCD_control_port_slave_agent:m0_burstcount -> dma_LCD_control_port_slave_translator:uav_burstcount
	wire          dma_lcd_control_port_slave_agent_rf_source_valid;                                 // dma_LCD_control_port_slave_agent:rf_source_valid -> dma_LCD_control_port_slave_agent_rsp_fifo:in_valid
	wire  [117:0] dma_lcd_control_port_slave_agent_rf_source_data;                                  // dma_LCD_control_port_slave_agent:rf_source_data -> dma_LCD_control_port_slave_agent_rsp_fifo:in_data
	wire          dma_lcd_control_port_slave_agent_rf_source_ready;                                 // dma_LCD_control_port_slave_agent_rsp_fifo:in_ready -> dma_LCD_control_port_slave_agent:rf_source_ready
	wire          dma_lcd_control_port_slave_agent_rf_source_startofpacket;                         // dma_LCD_control_port_slave_agent:rf_source_startofpacket -> dma_LCD_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_lcd_control_port_slave_agent_rf_source_endofpacket;                           // dma_LCD_control_port_slave_agent:rf_source_endofpacket -> dma_LCD_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_lcd_control_port_slave_agent_rsp_fifo_out_valid;                              // dma_LCD_control_port_slave_agent_rsp_fifo:out_valid -> dma_LCD_control_port_slave_agent:rf_sink_valid
	wire  [117:0] dma_lcd_control_port_slave_agent_rsp_fifo_out_data;                               // dma_LCD_control_port_slave_agent_rsp_fifo:out_data -> dma_LCD_control_port_slave_agent:rf_sink_data
	wire          dma_lcd_control_port_slave_agent_rsp_fifo_out_ready;                              // dma_LCD_control_port_slave_agent:rf_sink_ready -> dma_LCD_control_port_slave_agent_rsp_fifo:out_ready
	wire          dma_lcd_control_port_slave_agent_rsp_fifo_out_startofpacket;                      // dma_LCD_control_port_slave_agent_rsp_fifo:out_startofpacket -> dma_LCD_control_port_slave_agent:rf_sink_startofpacket
	wire          dma_lcd_control_port_slave_agent_rsp_fifo_out_endofpacket;                        // dma_LCD_control_port_slave_agent_rsp_fifo:out_endofpacket -> dma_LCD_control_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                            // cmd_mux_005:src_valid -> dma_LCD_control_port_slave_agent:cp_valid
	wire  [116:0] cmd_mux_005_src_data;                                                             // cmd_mux_005:src_data -> dma_LCD_control_port_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                            // dma_LCD_control_port_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [14:0] cmd_mux_005_src_channel;                                                          // cmd_mux_005:src_channel -> dma_LCD_control_port_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                    // cmd_mux_005:src_startofpacket -> dma_LCD_control_port_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                      // cmd_mux_005:src_endofpacket -> dma_LCD_control_port_slave_agent:cp_endofpacket
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                            // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                         // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                         // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_control_slave_agent_m0_address;                                             // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                          // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                       // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                           // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                               // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                          // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                        // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [117:0] sysid_control_slave_agent_rf_source_data;                                         // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                        // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                  // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                     // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [117:0] sysid_control_slave_agent_rsp_fifo_out_data;                                      // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                     // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                             // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                               // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                            // cmd_mux_006:src_valid -> sysid_control_slave_agent:cp_valid
	wire  [116:0] cmd_mux_006_src_data;                                                             // cmd_mux_006:src_data -> sysid_control_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                            // sysid_control_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [14:0] cmd_mux_006_src_channel;                                                          // cmd_mux_006:src_channel -> sysid_control_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                    // cmd_mux_006:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                      // cmd_mux_006:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire   [31:0] onchip_flash_data_agent_m0_readdata;                                              // onchip_flash_data_translator:uav_readdata -> onchip_flash_data_agent:m0_readdata
	wire          onchip_flash_data_agent_m0_waitrequest;                                           // onchip_flash_data_translator:uav_waitrequest -> onchip_flash_data_agent:m0_waitrequest
	wire          onchip_flash_data_agent_m0_debugaccess;                                           // onchip_flash_data_agent:m0_debugaccess -> onchip_flash_data_translator:uav_debugaccess
	wire   [31:0] onchip_flash_data_agent_m0_address;                                               // onchip_flash_data_agent:m0_address -> onchip_flash_data_translator:uav_address
	wire    [3:0] onchip_flash_data_agent_m0_byteenable;                                            // onchip_flash_data_agent:m0_byteenable -> onchip_flash_data_translator:uav_byteenable
	wire          onchip_flash_data_agent_m0_read;                                                  // onchip_flash_data_agent:m0_read -> onchip_flash_data_translator:uav_read
	wire          onchip_flash_data_agent_m0_readdatavalid;                                         // onchip_flash_data_translator:uav_readdatavalid -> onchip_flash_data_agent:m0_readdatavalid
	wire          onchip_flash_data_agent_m0_lock;                                                  // onchip_flash_data_agent:m0_lock -> onchip_flash_data_translator:uav_lock
	wire   [31:0] onchip_flash_data_agent_m0_writedata;                                             // onchip_flash_data_agent:m0_writedata -> onchip_flash_data_translator:uav_writedata
	wire          onchip_flash_data_agent_m0_write;                                                 // onchip_flash_data_agent:m0_write -> onchip_flash_data_translator:uav_write
	wire    [5:0] onchip_flash_data_agent_m0_burstcount;                                            // onchip_flash_data_agent:m0_burstcount -> onchip_flash_data_translator:uav_burstcount
	wire          onchip_flash_data_agent_rf_source_valid;                                          // onchip_flash_data_agent:rf_source_valid -> onchip_flash_data_agent_rsp_fifo:in_valid
	wire  [117:0] onchip_flash_data_agent_rf_source_data;                                           // onchip_flash_data_agent:rf_source_data -> onchip_flash_data_agent_rsp_fifo:in_data
	wire          onchip_flash_data_agent_rf_source_ready;                                          // onchip_flash_data_agent_rsp_fifo:in_ready -> onchip_flash_data_agent:rf_source_ready
	wire          onchip_flash_data_agent_rf_source_startofpacket;                                  // onchip_flash_data_agent:rf_source_startofpacket -> onchip_flash_data_agent_rsp_fifo:in_startofpacket
	wire          onchip_flash_data_agent_rf_source_endofpacket;                                    // onchip_flash_data_agent:rf_source_endofpacket -> onchip_flash_data_agent_rsp_fifo:in_endofpacket
	wire          onchip_flash_data_agent_rsp_fifo_out_valid;                                       // onchip_flash_data_agent_rsp_fifo:out_valid -> onchip_flash_data_agent:rf_sink_valid
	wire  [117:0] onchip_flash_data_agent_rsp_fifo_out_data;                                        // onchip_flash_data_agent_rsp_fifo:out_data -> onchip_flash_data_agent:rf_sink_data
	wire          onchip_flash_data_agent_rsp_fifo_out_ready;                                       // onchip_flash_data_agent:rf_sink_ready -> onchip_flash_data_agent_rsp_fifo:out_ready
	wire          onchip_flash_data_agent_rsp_fifo_out_startofpacket;                               // onchip_flash_data_agent_rsp_fifo:out_startofpacket -> onchip_flash_data_agent:rf_sink_startofpacket
	wire          onchip_flash_data_agent_rsp_fifo_out_endofpacket;                                 // onchip_flash_data_agent_rsp_fifo:out_endofpacket -> onchip_flash_data_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                            // cmd_mux_007:src_valid -> onchip_flash_data_agent:cp_valid
	wire  [116:0] cmd_mux_007_src_data;                                                             // cmd_mux_007:src_data -> onchip_flash_data_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                            // onchip_flash_data_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [14:0] cmd_mux_007_src_channel;                                                          // cmd_mux_007:src_channel -> onchip_flash_data_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                    // cmd_mux_007:src_startofpacket -> onchip_flash_data_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                      // cmd_mux_007:src_endofpacket -> onchip_flash_data_agent:cp_endofpacket
	wire   [31:0] nios2_gen2_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_debug_mem_slave_translator:uav_readdata -> nios2_gen2_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_gen2_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_debug_mem_slave_agent:m0_address -> nios2_gen2_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_debug_mem_slave_agent:m0_read -> nios2_gen2_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_debug_mem_slave_agent:m0_lock -> nios2_gen2_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_debug_mem_slave_agent:m0_writedata -> nios2_gen2_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_debug_mem_slave_agent:m0_write -> nios2_gen2_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [117:0] nios2_gen2_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_debug_mem_slave_agent:rf_source_data -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_debug_mem_slave_agent:rf_sink_valid
	wire  [117:0] nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                            // cmd_mux_008:src_valid -> nios2_gen2_debug_mem_slave_agent:cp_valid
	wire  [116:0] cmd_mux_008_src_data;                                                             // cmd_mux_008:src_data -> nios2_gen2_debug_mem_slave_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                            // nios2_gen2_debug_mem_slave_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [14:0] cmd_mux_008_src_channel;                                                          // cmd_mux_008:src_channel -> nios2_gen2_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                    // cmd_mux_008:src_startofpacket -> nios2_gen2_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                      // cmd_mux_008:src_endofpacket -> nios2_gen2_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] serialflash_epcs_control_port_agent_m0_readdata;                                  // serialflash_epcs_control_port_translator:uav_readdata -> serialflash_epcs_control_port_agent:m0_readdata
	wire          serialflash_epcs_control_port_agent_m0_waitrequest;                               // serialflash_epcs_control_port_translator:uav_waitrequest -> serialflash_epcs_control_port_agent:m0_waitrequest
	wire          serialflash_epcs_control_port_agent_m0_debugaccess;                               // serialflash_epcs_control_port_agent:m0_debugaccess -> serialflash_epcs_control_port_translator:uav_debugaccess
	wire   [31:0] serialflash_epcs_control_port_agent_m0_address;                                   // serialflash_epcs_control_port_agent:m0_address -> serialflash_epcs_control_port_translator:uav_address
	wire    [3:0] serialflash_epcs_control_port_agent_m0_byteenable;                                // serialflash_epcs_control_port_agent:m0_byteenable -> serialflash_epcs_control_port_translator:uav_byteenable
	wire          serialflash_epcs_control_port_agent_m0_read;                                      // serialflash_epcs_control_port_agent:m0_read -> serialflash_epcs_control_port_translator:uav_read
	wire          serialflash_epcs_control_port_agent_m0_readdatavalid;                             // serialflash_epcs_control_port_translator:uav_readdatavalid -> serialflash_epcs_control_port_agent:m0_readdatavalid
	wire          serialflash_epcs_control_port_agent_m0_lock;                                      // serialflash_epcs_control_port_agent:m0_lock -> serialflash_epcs_control_port_translator:uav_lock
	wire   [31:0] serialflash_epcs_control_port_agent_m0_writedata;                                 // serialflash_epcs_control_port_agent:m0_writedata -> serialflash_epcs_control_port_translator:uav_writedata
	wire          serialflash_epcs_control_port_agent_m0_write;                                     // serialflash_epcs_control_port_agent:m0_write -> serialflash_epcs_control_port_translator:uav_write
	wire    [2:0] serialflash_epcs_control_port_agent_m0_burstcount;                                // serialflash_epcs_control_port_agent:m0_burstcount -> serialflash_epcs_control_port_translator:uav_burstcount
	wire          serialflash_epcs_control_port_agent_rf_source_valid;                              // serialflash_epcs_control_port_agent:rf_source_valid -> serialflash_epcs_control_port_agent_rsp_fifo:in_valid
	wire  [117:0] serialflash_epcs_control_port_agent_rf_source_data;                               // serialflash_epcs_control_port_agent:rf_source_data -> serialflash_epcs_control_port_agent_rsp_fifo:in_data
	wire          serialflash_epcs_control_port_agent_rf_source_ready;                              // serialflash_epcs_control_port_agent_rsp_fifo:in_ready -> serialflash_epcs_control_port_agent:rf_source_ready
	wire          serialflash_epcs_control_port_agent_rf_source_startofpacket;                      // serialflash_epcs_control_port_agent:rf_source_startofpacket -> serialflash_epcs_control_port_agent_rsp_fifo:in_startofpacket
	wire          serialflash_epcs_control_port_agent_rf_source_endofpacket;                        // serialflash_epcs_control_port_agent:rf_source_endofpacket -> serialflash_epcs_control_port_agent_rsp_fifo:in_endofpacket
	wire          serialflash_epcs_control_port_agent_rsp_fifo_out_valid;                           // serialflash_epcs_control_port_agent_rsp_fifo:out_valid -> serialflash_epcs_control_port_agent:rf_sink_valid
	wire  [117:0] serialflash_epcs_control_port_agent_rsp_fifo_out_data;                            // serialflash_epcs_control_port_agent_rsp_fifo:out_data -> serialflash_epcs_control_port_agent:rf_sink_data
	wire          serialflash_epcs_control_port_agent_rsp_fifo_out_ready;                           // serialflash_epcs_control_port_agent:rf_sink_ready -> serialflash_epcs_control_port_agent_rsp_fifo:out_ready
	wire          serialflash_epcs_control_port_agent_rsp_fifo_out_startofpacket;                   // serialflash_epcs_control_port_agent_rsp_fifo:out_startofpacket -> serialflash_epcs_control_port_agent:rf_sink_startofpacket
	wire          serialflash_epcs_control_port_agent_rsp_fifo_out_endofpacket;                     // serialflash_epcs_control_port_agent_rsp_fifo:out_endofpacket -> serialflash_epcs_control_port_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                            // cmd_mux_009:src_valid -> serialflash_epcs_control_port_agent:cp_valid
	wire  [116:0] cmd_mux_009_src_data;                                                             // cmd_mux_009:src_data -> serialflash_epcs_control_port_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                            // serialflash_epcs_control_port_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [14:0] cmd_mux_009_src_channel;                                                          // cmd_mux_009:src_channel -> serialflash_epcs_control_port_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                    // cmd_mux_009:src_startofpacket -> serialflash_epcs_control_port_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                      // cmd_mux_009:src_endofpacket -> serialflash_epcs_control_port_agent:cp_endofpacket
	wire   [31:0] pdm_s0_agent_m0_readdata;                                                         // pdm_s0_translator:uav_readdata -> pdm_s0_agent:m0_readdata
	wire          pdm_s0_agent_m0_waitrequest;                                                      // pdm_s0_translator:uav_waitrequest -> pdm_s0_agent:m0_waitrequest
	wire          pdm_s0_agent_m0_debugaccess;                                                      // pdm_s0_agent:m0_debugaccess -> pdm_s0_translator:uav_debugaccess
	wire   [31:0] pdm_s0_agent_m0_address;                                                          // pdm_s0_agent:m0_address -> pdm_s0_translator:uav_address
	wire    [3:0] pdm_s0_agent_m0_byteenable;                                                       // pdm_s0_agent:m0_byteenable -> pdm_s0_translator:uav_byteenable
	wire          pdm_s0_agent_m0_read;                                                             // pdm_s0_agent:m0_read -> pdm_s0_translator:uav_read
	wire          pdm_s0_agent_m0_readdatavalid;                                                    // pdm_s0_translator:uav_readdatavalid -> pdm_s0_agent:m0_readdatavalid
	wire          pdm_s0_agent_m0_lock;                                                             // pdm_s0_agent:m0_lock -> pdm_s0_translator:uav_lock
	wire   [31:0] pdm_s0_agent_m0_writedata;                                                        // pdm_s0_agent:m0_writedata -> pdm_s0_translator:uav_writedata
	wire          pdm_s0_agent_m0_write;                                                            // pdm_s0_agent:m0_write -> pdm_s0_translator:uav_write
	wire    [2:0] pdm_s0_agent_m0_burstcount;                                                       // pdm_s0_agent:m0_burstcount -> pdm_s0_translator:uav_burstcount
	wire          pdm_s0_agent_rf_source_valid;                                                     // pdm_s0_agent:rf_source_valid -> pdm_s0_agent_rsp_fifo:in_valid
	wire  [117:0] pdm_s0_agent_rf_source_data;                                                      // pdm_s0_agent:rf_source_data -> pdm_s0_agent_rsp_fifo:in_data
	wire          pdm_s0_agent_rf_source_ready;                                                     // pdm_s0_agent_rsp_fifo:in_ready -> pdm_s0_agent:rf_source_ready
	wire          pdm_s0_agent_rf_source_startofpacket;                                             // pdm_s0_agent:rf_source_startofpacket -> pdm_s0_agent_rsp_fifo:in_startofpacket
	wire          pdm_s0_agent_rf_source_endofpacket;                                               // pdm_s0_agent:rf_source_endofpacket -> pdm_s0_agent_rsp_fifo:in_endofpacket
	wire          pdm_s0_agent_rsp_fifo_out_valid;                                                  // pdm_s0_agent_rsp_fifo:out_valid -> pdm_s0_agent:rf_sink_valid
	wire  [117:0] pdm_s0_agent_rsp_fifo_out_data;                                                   // pdm_s0_agent_rsp_fifo:out_data -> pdm_s0_agent:rf_sink_data
	wire          pdm_s0_agent_rsp_fifo_out_ready;                                                  // pdm_s0_agent:rf_sink_ready -> pdm_s0_agent_rsp_fifo:out_ready
	wire          pdm_s0_agent_rsp_fifo_out_startofpacket;                                          // pdm_s0_agent_rsp_fifo:out_startofpacket -> pdm_s0_agent:rf_sink_startofpacket
	wire          pdm_s0_agent_rsp_fifo_out_endofpacket;                                            // pdm_s0_agent_rsp_fifo:out_endofpacket -> pdm_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                            // cmd_mux_010:src_valid -> pdm_s0_agent:cp_valid
	wire  [116:0] cmd_mux_010_src_data;                                                             // cmd_mux_010:src_data -> pdm_s0_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                            // pdm_s0_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [14:0] cmd_mux_010_src_channel;                                                          // cmd_mux_010:src_channel -> pdm_s0_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                    // cmd_mux_010:src_startofpacket -> pdm_s0_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                      // cmd_mux_010:src_endofpacket -> pdm_s0_agent:cp_endofpacket
	wire   [31:0] sys_clk_timer_s1_agent_m0_readdata;                                               // sys_clk_timer_s1_translator:uav_readdata -> sys_clk_timer_s1_agent:m0_readdata
	wire          sys_clk_timer_s1_agent_m0_waitrequest;                                            // sys_clk_timer_s1_translator:uav_waitrequest -> sys_clk_timer_s1_agent:m0_waitrequest
	wire          sys_clk_timer_s1_agent_m0_debugaccess;                                            // sys_clk_timer_s1_agent:m0_debugaccess -> sys_clk_timer_s1_translator:uav_debugaccess
	wire   [31:0] sys_clk_timer_s1_agent_m0_address;                                                // sys_clk_timer_s1_agent:m0_address -> sys_clk_timer_s1_translator:uav_address
	wire    [3:0] sys_clk_timer_s1_agent_m0_byteenable;                                             // sys_clk_timer_s1_agent:m0_byteenable -> sys_clk_timer_s1_translator:uav_byteenable
	wire          sys_clk_timer_s1_agent_m0_read;                                                   // sys_clk_timer_s1_agent:m0_read -> sys_clk_timer_s1_translator:uav_read
	wire          sys_clk_timer_s1_agent_m0_readdatavalid;                                          // sys_clk_timer_s1_translator:uav_readdatavalid -> sys_clk_timer_s1_agent:m0_readdatavalid
	wire          sys_clk_timer_s1_agent_m0_lock;                                                   // sys_clk_timer_s1_agent:m0_lock -> sys_clk_timer_s1_translator:uav_lock
	wire   [31:0] sys_clk_timer_s1_agent_m0_writedata;                                              // sys_clk_timer_s1_agent:m0_writedata -> sys_clk_timer_s1_translator:uav_writedata
	wire          sys_clk_timer_s1_agent_m0_write;                                                  // sys_clk_timer_s1_agent:m0_write -> sys_clk_timer_s1_translator:uav_write
	wire    [2:0] sys_clk_timer_s1_agent_m0_burstcount;                                             // sys_clk_timer_s1_agent:m0_burstcount -> sys_clk_timer_s1_translator:uav_burstcount
	wire          sys_clk_timer_s1_agent_rf_source_valid;                                           // sys_clk_timer_s1_agent:rf_source_valid -> sys_clk_timer_s1_agent_rsp_fifo:in_valid
	wire  [117:0] sys_clk_timer_s1_agent_rf_source_data;                                            // sys_clk_timer_s1_agent:rf_source_data -> sys_clk_timer_s1_agent_rsp_fifo:in_data
	wire          sys_clk_timer_s1_agent_rf_source_ready;                                           // sys_clk_timer_s1_agent_rsp_fifo:in_ready -> sys_clk_timer_s1_agent:rf_source_ready
	wire          sys_clk_timer_s1_agent_rf_source_startofpacket;                                   // sys_clk_timer_s1_agent:rf_source_startofpacket -> sys_clk_timer_s1_agent_rsp_fifo:in_startofpacket
	wire          sys_clk_timer_s1_agent_rf_source_endofpacket;                                     // sys_clk_timer_s1_agent:rf_source_endofpacket -> sys_clk_timer_s1_agent_rsp_fifo:in_endofpacket
	wire          sys_clk_timer_s1_agent_rsp_fifo_out_valid;                                        // sys_clk_timer_s1_agent_rsp_fifo:out_valid -> sys_clk_timer_s1_agent:rf_sink_valid
	wire  [117:0] sys_clk_timer_s1_agent_rsp_fifo_out_data;                                         // sys_clk_timer_s1_agent_rsp_fifo:out_data -> sys_clk_timer_s1_agent:rf_sink_data
	wire          sys_clk_timer_s1_agent_rsp_fifo_out_ready;                                        // sys_clk_timer_s1_agent:rf_sink_ready -> sys_clk_timer_s1_agent_rsp_fifo:out_ready
	wire          sys_clk_timer_s1_agent_rsp_fifo_out_startofpacket;                                // sys_clk_timer_s1_agent_rsp_fifo:out_startofpacket -> sys_clk_timer_s1_agent:rf_sink_startofpacket
	wire          sys_clk_timer_s1_agent_rsp_fifo_out_endofpacket;                                  // sys_clk_timer_s1_agent_rsp_fifo:out_endofpacket -> sys_clk_timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                            // cmd_mux_011:src_valid -> sys_clk_timer_s1_agent:cp_valid
	wire  [116:0] cmd_mux_011_src_data;                                                             // cmd_mux_011:src_data -> sys_clk_timer_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                            // sys_clk_timer_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [14:0] cmd_mux_011_src_channel;                                                          // cmd_mux_011:src_channel -> sys_clk_timer_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                    // cmd_mux_011:src_startofpacket -> sys_clk_timer_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                      // cmd_mux_011:src_endofpacket -> sys_clk_timer_s1_agent:cp_endofpacket
	wire   [31:0] button_s1_agent_m0_readdata;                                                      // button_s1_translator:uav_readdata -> button_s1_agent:m0_readdata
	wire          button_s1_agent_m0_waitrequest;                                                   // button_s1_translator:uav_waitrequest -> button_s1_agent:m0_waitrequest
	wire          button_s1_agent_m0_debugaccess;                                                   // button_s1_agent:m0_debugaccess -> button_s1_translator:uav_debugaccess
	wire   [31:0] button_s1_agent_m0_address;                                                       // button_s1_agent:m0_address -> button_s1_translator:uav_address
	wire    [3:0] button_s1_agent_m0_byteenable;                                                    // button_s1_agent:m0_byteenable -> button_s1_translator:uav_byteenable
	wire          button_s1_agent_m0_read;                                                          // button_s1_agent:m0_read -> button_s1_translator:uav_read
	wire          button_s1_agent_m0_readdatavalid;                                                 // button_s1_translator:uav_readdatavalid -> button_s1_agent:m0_readdatavalid
	wire          button_s1_agent_m0_lock;                                                          // button_s1_agent:m0_lock -> button_s1_translator:uav_lock
	wire   [31:0] button_s1_agent_m0_writedata;                                                     // button_s1_agent:m0_writedata -> button_s1_translator:uav_writedata
	wire          button_s1_agent_m0_write;                                                         // button_s1_agent:m0_write -> button_s1_translator:uav_write
	wire    [2:0] button_s1_agent_m0_burstcount;                                                    // button_s1_agent:m0_burstcount -> button_s1_translator:uav_burstcount
	wire          button_s1_agent_rf_source_valid;                                                  // button_s1_agent:rf_source_valid -> button_s1_agent_rsp_fifo:in_valid
	wire  [117:0] button_s1_agent_rf_source_data;                                                   // button_s1_agent:rf_source_data -> button_s1_agent_rsp_fifo:in_data
	wire          button_s1_agent_rf_source_ready;                                                  // button_s1_agent_rsp_fifo:in_ready -> button_s1_agent:rf_source_ready
	wire          button_s1_agent_rf_source_startofpacket;                                          // button_s1_agent:rf_source_startofpacket -> button_s1_agent_rsp_fifo:in_startofpacket
	wire          button_s1_agent_rf_source_endofpacket;                                            // button_s1_agent:rf_source_endofpacket -> button_s1_agent_rsp_fifo:in_endofpacket
	wire          button_s1_agent_rsp_fifo_out_valid;                                               // button_s1_agent_rsp_fifo:out_valid -> button_s1_agent:rf_sink_valid
	wire  [117:0] button_s1_agent_rsp_fifo_out_data;                                                // button_s1_agent_rsp_fifo:out_data -> button_s1_agent:rf_sink_data
	wire          button_s1_agent_rsp_fifo_out_ready;                                               // button_s1_agent:rf_sink_ready -> button_s1_agent_rsp_fifo:out_ready
	wire          button_s1_agent_rsp_fifo_out_startofpacket;                                       // button_s1_agent_rsp_fifo:out_startofpacket -> button_s1_agent:rf_sink_startofpacket
	wire          button_s1_agent_rsp_fifo_out_endofpacket;                                         // button_s1_agent_rsp_fifo:out_endofpacket -> button_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                            // cmd_mux_012:src_valid -> button_s1_agent:cp_valid
	wire  [116:0] cmd_mux_012_src_data;                                                             // cmd_mux_012:src_data -> button_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                            // button_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [14:0] cmd_mux_012_src_channel;                                                          // cmd_mux_012:src_channel -> button_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                    // cmd_mux_012:src_startofpacket -> button_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                      // cmd_mux_012:src_endofpacket -> button_s1_agent:cp_endofpacket
	wire   [31:0] debport_s1_agent_m0_readdata;                                                     // DEBport_s1_translator:uav_readdata -> DEBport_s1_agent:m0_readdata
	wire          debport_s1_agent_m0_waitrequest;                                                  // DEBport_s1_translator:uav_waitrequest -> DEBport_s1_agent:m0_waitrequest
	wire          debport_s1_agent_m0_debugaccess;                                                  // DEBport_s1_agent:m0_debugaccess -> DEBport_s1_translator:uav_debugaccess
	wire   [31:0] debport_s1_agent_m0_address;                                                      // DEBport_s1_agent:m0_address -> DEBport_s1_translator:uav_address
	wire    [3:0] debport_s1_agent_m0_byteenable;                                                   // DEBport_s1_agent:m0_byteenable -> DEBport_s1_translator:uav_byteenable
	wire          debport_s1_agent_m0_read;                                                         // DEBport_s1_agent:m0_read -> DEBport_s1_translator:uav_read
	wire          debport_s1_agent_m0_readdatavalid;                                                // DEBport_s1_translator:uav_readdatavalid -> DEBport_s1_agent:m0_readdatavalid
	wire          debport_s1_agent_m0_lock;                                                         // DEBport_s1_agent:m0_lock -> DEBport_s1_translator:uav_lock
	wire   [31:0] debport_s1_agent_m0_writedata;                                                    // DEBport_s1_agent:m0_writedata -> DEBport_s1_translator:uav_writedata
	wire          debport_s1_agent_m0_write;                                                        // DEBport_s1_agent:m0_write -> DEBport_s1_translator:uav_write
	wire    [2:0] debport_s1_agent_m0_burstcount;                                                   // DEBport_s1_agent:m0_burstcount -> DEBport_s1_translator:uav_burstcount
	wire          debport_s1_agent_rf_source_valid;                                                 // DEBport_s1_agent:rf_source_valid -> DEBport_s1_agent_rsp_fifo:in_valid
	wire  [117:0] debport_s1_agent_rf_source_data;                                                  // DEBport_s1_agent:rf_source_data -> DEBport_s1_agent_rsp_fifo:in_data
	wire          debport_s1_agent_rf_source_ready;                                                 // DEBport_s1_agent_rsp_fifo:in_ready -> DEBport_s1_agent:rf_source_ready
	wire          debport_s1_agent_rf_source_startofpacket;                                         // DEBport_s1_agent:rf_source_startofpacket -> DEBport_s1_agent_rsp_fifo:in_startofpacket
	wire          debport_s1_agent_rf_source_endofpacket;                                           // DEBport_s1_agent:rf_source_endofpacket -> DEBport_s1_agent_rsp_fifo:in_endofpacket
	wire          debport_s1_agent_rsp_fifo_out_valid;                                              // DEBport_s1_agent_rsp_fifo:out_valid -> DEBport_s1_agent:rf_sink_valid
	wire  [117:0] debport_s1_agent_rsp_fifo_out_data;                                               // DEBport_s1_agent_rsp_fifo:out_data -> DEBport_s1_agent:rf_sink_data
	wire          debport_s1_agent_rsp_fifo_out_ready;                                              // DEBport_s1_agent:rf_sink_ready -> DEBport_s1_agent_rsp_fifo:out_ready
	wire          debport_s1_agent_rsp_fifo_out_startofpacket;                                      // DEBport_s1_agent_rsp_fifo:out_startofpacket -> DEBport_s1_agent:rf_sink_startofpacket
	wire          debport_s1_agent_rsp_fifo_out_endofpacket;                                        // DEBport_s1_agent_rsp_fifo:out_endofpacket -> DEBport_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                            // cmd_mux_013:src_valid -> DEBport_s1_agent:cp_valid
	wire  [116:0] cmd_mux_013_src_data;                                                             // cmd_mux_013:src_data -> DEBport_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                            // DEBport_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [14:0] cmd_mux_013_src_channel;                                                          // cmd_mux_013:src_channel -> DEBport_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                    // cmd_mux_013:src_startofpacket -> DEBport_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                      // cmd_mux_013:src_endofpacket -> DEBport_s1_agent:cp_endofpacket
	wire   [31:0] led_s1_agent_m0_readdata;                                                         // LED_s1_translator:uav_readdata -> LED_s1_agent:m0_readdata
	wire          led_s1_agent_m0_waitrequest;                                                      // LED_s1_translator:uav_waitrequest -> LED_s1_agent:m0_waitrequest
	wire          led_s1_agent_m0_debugaccess;                                                      // LED_s1_agent:m0_debugaccess -> LED_s1_translator:uav_debugaccess
	wire   [31:0] led_s1_agent_m0_address;                                                          // LED_s1_agent:m0_address -> LED_s1_translator:uav_address
	wire    [3:0] led_s1_agent_m0_byteenable;                                                       // LED_s1_agent:m0_byteenable -> LED_s1_translator:uav_byteenable
	wire          led_s1_agent_m0_read;                                                             // LED_s1_agent:m0_read -> LED_s1_translator:uav_read
	wire          led_s1_agent_m0_readdatavalid;                                                    // LED_s1_translator:uav_readdatavalid -> LED_s1_agent:m0_readdatavalid
	wire          led_s1_agent_m0_lock;                                                             // LED_s1_agent:m0_lock -> LED_s1_translator:uav_lock
	wire   [31:0] led_s1_agent_m0_writedata;                                                        // LED_s1_agent:m0_writedata -> LED_s1_translator:uav_writedata
	wire          led_s1_agent_m0_write;                                                            // LED_s1_agent:m0_write -> LED_s1_translator:uav_write
	wire    [2:0] led_s1_agent_m0_burstcount;                                                       // LED_s1_agent:m0_burstcount -> LED_s1_translator:uav_burstcount
	wire          led_s1_agent_rf_source_valid;                                                     // LED_s1_agent:rf_source_valid -> LED_s1_agent_rsp_fifo:in_valid
	wire  [117:0] led_s1_agent_rf_source_data;                                                      // LED_s1_agent:rf_source_data -> LED_s1_agent_rsp_fifo:in_data
	wire          led_s1_agent_rf_source_ready;                                                     // LED_s1_agent_rsp_fifo:in_ready -> LED_s1_agent:rf_source_ready
	wire          led_s1_agent_rf_source_startofpacket;                                             // LED_s1_agent:rf_source_startofpacket -> LED_s1_agent_rsp_fifo:in_startofpacket
	wire          led_s1_agent_rf_source_endofpacket;                                               // LED_s1_agent:rf_source_endofpacket -> LED_s1_agent_rsp_fifo:in_endofpacket
	wire          led_s1_agent_rsp_fifo_out_valid;                                                  // LED_s1_agent_rsp_fifo:out_valid -> LED_s1_agent:rf_sink_valid
	wire  [117:0] led_s1_agent_rsp_fifo_out_data;                                                   // LED_s1_agent_rsp_fifo:out_data -> LED_s1_agent:rf_sink_data
	wire          led_s1_agent_rsp_fifo_out_ready;                                                  // LED_s1_agent:rf_sink_ready -> LED_s1_agent_rsp_fifo:out_ready
	wire          led_s1_agent_rsp_fifo_out_startofpacket;                                          // LED_s1_agent_rsp_fifo:out_startofpacket -> LED_s1_agent:rf_sink_startofpacket
	wire          led_s1_agent_rsp_fifo_out_endofpacket;                                            // LED_s1_agent_rsp_fifo:out_endofpacket -> LED_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                            // cmd_mux_014:src_valid -> LED_s1_agent:cp_valid
	wire  [116:0] cmd_mux_014_src_data;                                                             // cmd_mux_014:src_data -> LED_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                            // LED_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [14:0] cmd_mux_014_src_channel;                                                          // cmd_mux_014:src_channel -> LED_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                    // cmd_mux_014:src_startofpacket -> LED_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                      // cmd_mux_014:src_endofpacket -> LED_s1_agent:cp_endofpacket
	wire          av_wr_master_0_avalon_master_agent_cp_valid;                                      // av_wr_master_0_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [116:0] av_wr_master_0_avalon_master_agent_cp_data;                                       // av_wr_master_0_avalon_master_agent:cp_data -> router:sink_data
	wire          av_wr_master_0_avalon_master_agent_cp_ready;                                      // router:sink_ready -> av_wr_master_0_avalon_master_agent:cp_ready
	wire          av_wr_master_0_avalon_master_agent_cp_startofpacket;                              // av_wr_master_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          av_wr_master_0_avalon_master_agent_cp_endofpacket;                                // av_wr_master_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                 // router:src_valid -> cmd_demux:sink_valid
	wire  [116:0] router_src_data;                                                                  // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                 // cmd_demux:sink_ready -> router:src_ready
	wire   [14:0] router_src_channel;                                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_gen2_data_master_agent_cp_valid;                                            // nios2_gen2_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [116:0] nios2_gen2_data_master_agent_cp_data;                                             // nios2_gen2_data_master_agent:cp_data -> router_001:sink_data
	wire          nios2_gen2_data_master_agent_cp_ready;                                            // router_001:sink_ready -> nios2_gen2_data_master_agent:cp_ready
	wire          nios2_gen2_data_master_agent_cp_startofpacket;                                    // nios2_gen2_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_gen2_data_master_agent_cp_endofpacket;                                      // nios2_gen2_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                             // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [116:0] router_001_src_data;                                                              // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                             // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [14:0] router_001_src_channel;                                                           // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          nios2_gen2_instruction_master_agent_cp_valid;                                     // nios2_gen2_instruction_master_agent:cp_valid -> router_002:sink_valid
	wire  [116:0] nios2_gen2_instruction_master_agent_cp_data;                                      // nios2_gen2_instruction_master_agent:cp_data -> router_002:sink_data
	wire          nios2_gen2_instruction_master_agent_cp_ready;                                     // router_002:sink_ready -> nios2_gen2_instruction_master_agent:cp_ready
	wire          nios2_gen2_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_instruction_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          nios2_gen2_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_instruction_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                             // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [116:0] router_002_src_data;                                                              // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                             // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [14:0] router_002_src_channel;                                                           // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          dma_read_master_agent_cp_valid;                                                   // dma_read_master_agent:cp_valid -> router_003:sink_valid
	wire  [116:0] dma_read_master_agent_cp_data;                                                    // dma_read_master_agent:cp_data -> router_003:sink_data
	wire          dma_read_master_agent_cp_ready;                                                   // router_003:sink_ready -> dma_read_master_agent:cp_ready
	wire          dma_read_master_agent_cp_startofpacket;                                           // dma_read_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          dma_read_master_agent_cp_endofpacket;                                             // dma_read_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          dma_lcd_read_master_agent_cp_valid;                                               // dma_LCD_read_master_agent:cp_valid -> router_004:sink_valid
	wire   [98:0] dma_lcd_read_master_agent_cp_data;                                                // dma_LCD_read_master_agent:cp_data -> router_004:sink_data
	wire          dma_lcd_read_master_agent_cp_ready;                                               // router_004:sink_ready -> dma_LCD_read_master_agent:cp_ready
	wire          dma_lcd_read_master_agent_cp_startofpacket;                                       // dma_LCD_read_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          dma_lcd_read_master_agent_cp_endofpacket;                                         // dma_LCD_read_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                             // router_004:src_valid -> cmd_demux_004:sink_valid
	wire   [98:0] router_004_src_data;                                                              // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                             // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [14:0] router_004_src_channel;                                                           // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          dma_write_master_agent_cp_valid;                                                  // dma_write_master_agent:cp_valid -> router_005:sink_valid
	wire  [116:0] dma_write_master_agent_cp_data;                                                   // dma_write_master_agent:cp_data -> router_005:sink_data
	wire          dma_write_master_agent_cp_ready;                                                  // router_005:sink_ready -> dma_write_master_agent:cp_ready
	wire          dma_write_master_agent_cp_startofpacket;                                          // dma_write_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          dma_write_master_agent_cp_endofpacket;                                            // dma_write_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                             // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [116:0] router_005_src_data;                                                              // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                             // cmd_demux_005:sink_ready -> router_005:src_ready
	wire   [14:0] router_005_src_channel;                                                           // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          dma_lcd_write_master_agent_cp_valid;                                              // dma_LCD_write_master_agent:cp_valid -> router_006:sink_valid
	wire   [98:0] dma_lcd_write_master_agent_cp_data;                                               // dma_LCD_write_master_agent:cp_data -> router_006:sink_data
	wire          dma_lcd_write_master_agent_cp_ready;                                              // router_006:sink_ready -> dma_LCD_write_master_agent:cp_ready
	wire          dma_lcd_write_master_agent_cp_startofpacket;                                      // dma_LCD_write_master_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          dma_lcd_write_master_agent_cp_endofpacket;                                        // dma_LCD_write_master_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                             // router_006:src_valid -> cmd_demux_006:sink_valid
	wire   [98:0] router_006_src_data;                                                              // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                             // cmd_demux_006:sink_ready -> router_006:src_ready
	wire   [14:0] router_006_src_channel;                                                           // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                     // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                       // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                          // sdram_s1_agent:rp_valid -> router_007:sink_valid
	wire   [98:0] sdram_s1_agent_rp_data;                                                           // sdram_s1_agent:rp_data -> router_007:sink_data
	wire          sdram_s1_agent_rp_ready;                                                          // router_007:sink_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                  // sdram_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                    // sdram_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                             // router_007:src_valid -> rsp_demux:sink_valid
	wire   [98:0] router_007_src_data;                                                              // router_007:src_data -> rsp_demux:sink_data
	wire          router_007_src_ready;                                                             // rsp_demux:sink_ready -> router_007:src_ready
	wire   [14:0] router_007_src_channel;                                                           // router_007:src_channel -> rsp_demux:sink_channel
	wire          router_007_src_startofpacket;                                                     // router_007:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_007_src_endofpacket;                                                       // router_007:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          ili9341spi_a_slave_agent_rp_valid;                                                // ILI9341SPI_a_slave_agent:rp_valid -> router_008:sink_valid
	wire  [116:0] ili9341spi_a_slave_agent_rp_data;                                                 // ILI9341SPI_a_slave_agent:rp_data -> router_008:sink_data
	wire          ili9341spi_a_slave_agent_rp_ready;                                                // router_008:sink_ready -> ILI9341SPI_a_slave_agent:rp_ready
	wire          ili9341spi_a_slave_agent_rp_startofpacket;                                        // ILI9341SPI_a_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          ili9341spi_a_slave_agent_rp_endofpacket;                                          // ILI9341SPI_a_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                             // router_008:src_valid -> rsp_demux_001:sink_valid
	wire  [116:0] router_008_src_data;                                                              // router_008:src_data -> rsp_demux_001:sink_data
	wire          router_008_src_ready;                                                             // rsp_demux_001:sink_ready -> router_008:src_ready
	wire   [14:0] router_008_src_channel;                                                           // router_008:src_channel -> rsp_demux_001:sink_channel
	wire          router_008_src_startofpacket;                                                     // router_008:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_008_src_endofpacket;                                                       // router_008:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_009:sink_valid
	wire  [116:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_009:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                       // router_009:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                             // router_009:src_valid -> rsp_demux_002:sink_valid
	wire  [116:0] router_009_src_data;                                                              // router_009:src_data -> rsp_demux_002:sink_data
	wire          router_009_src_ready;                                                             // rsp_demux_002:sink_ready -> router_009:src_ready
	wire   [14:0] router_009_src_channel;                                                           // router_009:src_channel -> rsp_demux_002:sink_channel
	wire          router_009_src_startofpacket;                                                     // router_009:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_009_src_endofpacket;                                                       // router_009:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          ft245_avalon_slave_agent_rp_valid;                                                // ft245_avalon_slave_agent:rp_valid -> router_010:sink_valid
	wire  [116:0] ft245_avalon_slave_agent_rp_data;                                                 // ft245_avalon_slave_agent:rp_data -> router_010:sink_data
	wire          ft245_avalon_slave_agent_rp_ready;                                                // router_010:sink_ready -> ft245_avalon_slave_agent:rp_ready
	wire          ft245_avalon_slave_agent_rp_startofpacket;                                        // ft245_avalon_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          ft245_avalon_slave_agent_rp_endofpacket;                                          // ft245_avalon_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                             // router_010:src_valid -> rsp_demux_003:sink_valid
	wire  [116:0] router_010_src_data;                                                              // router_010:src_data -> rsp_demux_003:sink_data
	wire          router_010_src_ready;                                                             // rsp_demux_003:sink_ready -> router_010:src_ready
	wire   [14:0] router_010_src_channel;                                                           // router_010:src_channel -> rsp_demux_003:sink_channel
	wire          router_010_src_startofpacket;                                                     // router_010:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_010_src_endofpacket;                                                       // router_010:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          dma_control_port_slave_agent_rp_valid;                                            // dma_control_port_slave_agent:rp_valid -> router_011:sink_valid
	wire  [116:0] dma_control_port_slave_agent_rp_data;                                             // dma_control_port_slave_agent:rp_data -> router_011:sink_data
	wire          dma_control_port_slave_agent_rp_ready;                                            // router_011:sink_ready -> dma_control_port_slave_agent:rp_ready
	wire          dma_control_port_slave_agent_rp_startofpacket;                                    // dma_control_port_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          dma_control_port_slave_agent_rp_endofpacket;                                      // dma_control_port_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                             // router_011:src_valid -> rsp_demux_004:sink_valid
	wire  [116:0] router_011_src_data;                                                              // router_011:src_data -> rsp_demux_004:sink_data
	wire          router_011_src_ready;                                                             // rsp_demux_004:sink_ready -> router_011:src_ready
	wire   [14:0] router_011_src_channel;                                                           // router_011:src_channel -> rsp_demux_004:sink_channel
	wire          router_011_src_startofpacket;                                                     // router_011:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_011_src_endofpacket;                                                       // router_011:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          dma_lcd_control_port_slave_agent_rp_valid;                                        // dma_LCD_control_port_slave_agent:rp_valid -> router_012:sink_valid
	wire  [116:0] dma_lcd_control_port_slave_agent_rp_data;                                         // dma_LCD_control_port_slave_agent:rp_data -> router_012:sink_data
	wire          dma_lcd_control_port_slave_agent_rp_ready;                                        // router_012:sink_ready -> dma_LCD_control_port_slave_agent:rp_ready
	wire          dma_lcd_control_port_slave_agent_rp_startofpacket;                                // dma_LCD_control_port_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          dma_lcd_control_port_slave_agent_rp_endofpacket;                                  // dma_LCD_control_port_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                             // router_012:src_valid -> rsp_demux_005:sink_valid
	wire  [116:0] router_012_src_data;                                                              // router_012:src_data -> rsp_demux_005:sink_data
	wire          router_012_src_ready;                                                             // rsp_demux_005:sink_ready -> router_012:src_ready
	wire   [14:0] router_012_src_channel;                                                           // router_012:src_channel -> rsp_demux_005:sink_channel
	wire          router_012_src_startofpacket;                                                     // router_012:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_012_src_endofpacket;                                                       // router_012:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                               // sysid_control_slave_agent:rp_valid -> router_013:sink_valid
	wire  [116:0] sysid_control_slave_agent_rp_data;                                                // sysid_control_slave_agent:rp_data -> router_013:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                               // router_013:sink_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                       // sysid_control_slave_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                         // sysid_control_slave_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                             // router_013:src_valid -> rsp_demux_006:sink_valid
	wire  [116:0] router_013_src_data;                                                              // router_013:src_data -> rsp_demux_006:sink_data
	wire          router_013_src_ready;                                                             // rsp_demux_006:sink_ready -> router_013:src_ready
	wire   [14:0] router_013_src_channel;                                                           // router_013:src_channel -> rsp_demux_006:sink_channel
	wire          router_013_src_startofpacket;                                                     // router_013:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_013_src_endofpacket;                                                       // router_013:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          onchip_flash_data_agent_rp_valid;                                                 // onchip_flash_data_agent:rp_valid -> router_014:sink_valid
	wire  [116:0] onchip_flash_data_agent_rp_data;                                                  // onchip_flash_data_agent:rp_data -> router_014:sink_data
	wire          onchip_flash_data_agent_rp_ready;                                                 // router_014:sink_ready -> onchip_flash_data_agent:rp_ready
	wire          onchip_flash_data_agent_rp_startofpacket;                                         // onchip_flash_data_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          onchip_flash_data_agent_rp_endofpacket;                                           // onchip_flash_data_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                             // router_014:src_valid -> rsp_demux_007:sink_valid
	wire  [116:0] router_014_src_data;                                                              // router_014:src_data -> rsp_demux_007:sink_data
	wire          router_014_src_ready;                                                             // rsp_demux_007:sink_ready -> router_014:src_ready
	wire   [14:0] router_014_src_channel;                                                           // router_014:src_channel -> rsp_demux_007:sink_channel
	wire          router_014_src_startofpacket;                                                     // router_014:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_014_src_endofpacket;                                                       // router_014:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_debug_mem_slave_agent:rp_valid -> router_015:sink_valid
	wire  [116:0] nios2_gen2_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_debug_mem_slave_agent:rp_data -> router_015:sink_data
	wire          nios2_gen2_debug_mem_slave_agent_rp_ready;                                        // router_015:sink_ready -> nios2_gen2_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_debug_mem_slave_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_debug_mem_slave_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                             // router_015:src_valid -> rsp_demux_008:sink_valid
	wire  [116:0] router_015_src_data;                                                              // router_015:src_data -> rsp_demux_008:sink_data
	wire          router_015_src_ready;                                                             // rsp_demux_008:sink_ready -> router_015:src_ready
	wire   [14:0] router_015_src_channel;                                                           // router_015:src_channel -> rsp_demux_008:sink_channel
	wire          router_015_src_startofpacket;                                                     // router_015:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_015_src_endofpacket;                                                       // router_015:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          serialflash_epcs_control_port_agent_rp_valid;                                     // serialflash_epcs_control_port_agent:rp_valid -> router_016:sink_valid
	wire  [116:0] serialflash_epcs_control_port_agent_rp_data;                                      // serialflash_epcs_control_port_agent:rp_data -> router_016:sink_data
	wire          serialflash_epcs_control_port_agent_rp_ready;                                     // router_016:sink_ready -> serialflash_epcs_control_port_agent:rp_ready
	wire          serialflash_epcs_control_port_agent_rp_startofpacket;                             // serialflash_epcs_control_port_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          serialflash_epcs_control_port_agent_rp_endofpacket;                               // serialflash_epcs_control_port_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                             // router_016:src_valid -> rsp_demux_009:sink_valid
	wire  [116:0] router_016_src_data;                                                              // router_016:src_data -> rsp_demux_009:sink_data
	wire          router_016_src_ready;                                                             // rsp_demux_009:sink_ready -> router_016:src_ready
	wire   [14:0] router_016_src_channel;                                                           // router_016:src_channel -> rsp_demux_009:sink_channel
	wire          router_016_src_startofpacket;                                                     // router_016:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_016_src_endofpacket;                                                       // router_016:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          pdm_s0_agent_rp_valid;                                                            // pdm_s0_agent:rp_valid -> router_017:sink_valid
	wire  [116:0] pdm_s0_agent_rp_data;                                                             // pdm_s0_agent:rp_data -> router_017:sink_data
	wire          pdm_s0_agent_rp_ready;                                                            // router_017:sink_ready -> pdm_s0_agent:rp_ready
	wire          pdm_s0_agent_rp_startofpacket;                                                    // pdm_s0_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          pdm_s0_agent_rp_endofpacket;                                                      // pdm_s0_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                             // router_017:src_valid -> rsp_demux_010:sink_valid
	wire  [116:0] router_017_src_data;                                                              // router_017:src_data -> rsp_demux_010:sink_data
	wire          router_017_src_ready;                                                             // rsp_demux_010:sink_ready -> router_017:src_ready
	wire   [14:0] router_017_src_channel;                                                           // router_017:src_channel -> rsp_demux_010:sink_channel
	wire          router_017_src_startofpacket;                                                     // router_017:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_017_src_endofpacket;                                                       // router_017:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          sys_clk_timer_s1_agent_rp_valid;                                                  // sys_clk_timer_s1_agent:rp_valid -> router_018:sink_valid
	wire  [116:0] sys_clk_timer_s1_agent_rp_data;                                                   // sys_clk_timer_s1_agent:rp_data -> router_018:sink_data
	wire          sys_clk_timer_s1_agent_rp_ready;                                                  // router_018:sink_ready -> sys_clk_timer_s1_agent:rp_ready
	wire          sys_clk_timer_s1_agent_rp_startofpacket;                                          // sys_clk_timer_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          sys_clk_timer_s1_agent_rp_endofpacket;                                            // sys_clk_timer_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                             // router_018:src_valid -> rsp_demux_011:sink_valid
	wire  [116:0] router_018_src_data;                                                              // router_018:src_data -> rsp_demux_011:sink_data
	wire          router_018_src_ready;                                                             // rsp_demux_011:sink_ready -> router_018:src_ready
	wire   [14:0] router_018_src_channel;                                                           // router_018:src_channel -> rsp_demux_011:sink_channel
	wire          router_018_src_startofpacket;                                                     // router_018:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_018_src_endofpacket;                                                       // router_018:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          button_s1_agent_rp_valid;                                                         // button_s1_agent:rp_valid -> router_019:sink_valid
	wire  [116:0] button_s1_agent_rp_data;                                                          // button_s1_agent:rp_data -> router_019:sink_data
	wire          button_s1_agent_rp_ready;                                                         // router_019:sink_ready -> button_s1_agent:rp_ready
	wire          button_s1_agent_rp_startofpacket;                                                 // button_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          button_s1_agent_rp_endofpacket;                                                   // button_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                             // router_019:src_valid -> rsp_demux_012:sink_valid
	wire  [116:0] router_019_src_data;                                                              // router_019:src_data -> rsp_demux_012:sink_data
	wire          router_019_src_ready;                                                             // rsp_demux_012:sink_ready -> router_019:src_ready
	wire   [14:0] router_019_src_channel;                                                           // router_019:src_channel -> rsp_demux_012:sink_channel
	wire          router_019_src_startofpacket;                                                     // router_019:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_019_src_endofpacket;                                                       // router_019:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          debport_s1_agent_rp_valid;                                                        // DEBport_s1_agent:rp_valid -> router_020:sink_valid
	wire  [116:0] debport_s1_agent_rp_data;                                                         // DEBport_s1_agent:rp_data -> router_020:sink_data
	wire          debport_s1_agent_rp_ready;                                                        // router_020:sink_ready -> DEBport_s1_agent:rp_ready
	wire          debport_s1_agent_rp_startofpacket;                                                // DEBport_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          debport_s1_agent_rp_endofpacket;                                                  // DEBport_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                             // router_020:src_valid -> rsp_demux_013:sink_valid
	wire  [116:0] router_020_src_data;                                                              // router_020:src_data -> rsp_demux_013:sink_data
	wire          router_020_src_ready;                                                             // rsp_demux_013:sink_ready -> router_020:src_ready
	wire   [14:0] router_020_src_channel;                                                           // router_020:src_channel -> rsp_demux_013:sink_channel
	wire          router_020_src_startofpacket;                                                     // router_020:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_020_src_endofpacket;                                                       // router_020:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          led_s1_agent_rp_valid;                                                            // LED_s1_agent:rp_valid -> router_021:sink_valid
	wire  [116:0] led_s1_agent_rp_data;                                                             // LED_s1_agent:rp_data -> router_021:sink_data
	wire          led_s1_agent_rp_ready;                                                            // router_021:sink_ready -> LED_s1_agent:rp_ready
	wire          led_s1_agent_rp_startofpacket;                                                    // LED_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          led_s1_agent_rp_endofpacket;                                                      // LED_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                             // router_021:src_valid -> rsp_demux_014:sink_valid
	wire  [116:0] router_021_src_data;                                                              // router_021:src_data -> rsp_demux_014:sink_data
	wire          router_021_src_ready;                                                             // rsp_demux_014:sink_ready -> router_021:src_ready
	wire   [14:0] router_021_src_channel;                                                           // router_021:src_channel -> rsp_demux_014:sink_channel
	wire          router_021_src_startofpacket;                                                     // router_021:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_021_src_endofpacket;                                                       // router_021:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_003_src_valid;                                                             // router_003:src_valid -> dma_read_master_limiter:cmd_sink_valid
	wire  [116:0] router_003_src_data;                                                              // router_003:src_data -> dma_read_master_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                             // dma_read_master_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [14:0] router_003_src_channel;                                                           // router_003:src_channel -> dma_read_master_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> dma_read_master_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> dma_read_master_limiter:cmd_sink_endofpacket
	wire  [116:0] dma_read_master_limiter_cmd_src_data;                                             // dma_read_master_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          dma_read_master_limiter_cmd_src_ready;                                            // cmd_demux_003:sink_ready -> dma_read_master_limiter:cmd_src_ready
	wire   [14:0] dma_read_master_limiter_cmd_src_channel;                                          // dma_read_master_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          dma_read_master_limiter_cmd_src_startofpacket;                                    // dma_read_master_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          dma_read_master_limiter_cmd_src_endofpacket;                                      // dma_read_master_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                            // rsp_mux_003:src_valid -> dma_read_master_limiter:rsp_sink_valid
	wire  [116:0] rsp_mux_003_src_data;                                                             // rsp_mux_003:src_data -> dma_read_master_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                            // dma_read_master_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [14:0] rsp_mux_003_src_channel;                                                          // rsp_mux_003:src_channel -> dma_read_master_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                    // rsp_mux_003:src_startofpacket -> dma_read_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                      // rsp_mux_003:src_endofpacket -> dma_read_master_limiter:rsp_sink_endofpacket
	wire          dma_read_master_limiter_rsp_src_valid;                                            // dma_read_master_limiter:rsp_src_valid -> dma_read_master_agent:rp_valid
	wire  [116:0] dma_read_master_limiter_rsp_src_data;                                             // dma_read_master_limiter:rsp_src_data -> dma_read_master_agent:rp_data
	wire          dma_read_master_limiter_rsp_src_ready;                                            // dma_read_master_agent:rp_ready -> dma_read_master_limiter:rsp_src_ready
	wire   [14:0] dma_read_master_limiter_rsp_src_channel;                                          // dma_read_master_limiter:rsp_src_channel -> dma_read_master_agent:rp_channel
	wire          dma_read_master_limiter_rsp_src_startofpacket;                                    // dma_read_master_limiter:rsp_src_startofpacket -> dma_read_master_agent:rp_startofpacket
	wire          dma_read_master_limiter_rsp_src_endofpacket;                                      // dma_read_master_limiter:rsp_src_endofpacket -> dma_read_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> sdram_s1_burst_adapter:sink0_valid
	wire   [98:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> sdram_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                // sdram_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [14:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> sdram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                             // sdram_s1_burst_adapter:source0_valid -> sdram_s1_agent:cp_valid
	wire   [98:0] sdram_s1_burst_adapter_source0_data;                                              // sdram_s1_burst_adapter:source0_data -> sdram_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                             // sdram_s1_agent:cp_ready -> sdram_s1_burst_adapter:source0_ready
	wire   [14:0] sdram_s1_burst_adapter_source0_channel;                                           // sdram_s1_burst_adapter:source0_channel -> sdram_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                     // sdram_s1_burst_adapter:source0_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                       // sdram_s1_burst_adapter:source0_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          cmd_demux_001_src1_valid;                                                         // cmd_demux_001:src1_valid -> cmd_mux_001:sink0_valid
	wire  [116:0] cmd_demux_001_src1_data;                                                          // cmd_demux_001:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src1_ready;                                                         // cmd_mux_001:sink0_ready -> cmd_demux_001:src1_ready
	wire   [14:0] cmd_demux_001_src1_channel;                                                       // cmd_demux_001:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src1_startofpacket;                                                 // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                   // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                         // cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	wire  [116:0] cmd_demux_001_src2_data;                                                          // cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_001_src2_ready;                                                         // cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	wire   [14:0] cmd_demux_001_src2_channel;                                                       // cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_001_src2_startofpacket;                                                 // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                   // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                         // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire  [116:0] cmd_demux_001_src3_data;                                                          // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_001_src3_ready;                                                         // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire   [14:0] cmd_demux_001_src3_channel;                                                       // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                                 // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                   // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                         // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire  [116:0] cmd_demux_001_src4_data;                                                          // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_001_src4_ready;                                                         // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire   [14:0] cmd_demux_001_src4_channel;                                                       // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_001_src4_startofpacket;                                                 // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                   // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                         // cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	wire  [116:0] cmd_demux_001_src5_data;                                                          // cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_001_src5_ready;                                                         // cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	wire   [14:0] cmd_demux_001_src5_channel;                                                       // cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_001_src5_startofpacket;                                                 // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                   // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                                         // cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	wire  [116:0] cmd_demux_001_src6_data;                                                          // cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_001_src6_ready;                                                         // cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	wire   [14:0] cmd_demux_001_src6_channel;                                                       // cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_001_src6_startofpacket;                                                 // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                   // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                         // cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	wire  [116:0] cmd_demux_001_src7_data;                                                          // cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_001_src7_ready;                                                         // cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	wire   [14:0] cmd_demux_001_src7_channel;                                                       // cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                 // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                   // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                         // cmd_demux_001:src8_valid -> cmd_mux_008:sink0_valid
	wire  [116:0] cmd_demux_001_src8_data;                                                          // cmd_demux_001:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_001_src8_ready;                                                         // cmd_mux_008:sink0_ready -> cmd_demux_001:src8_ready
	wire   [14:0] cmd_demux_001_src8_channel;                                                       // cmd_demux_001:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_001_src8_startofpacket;                                                 // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                   // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src9_valid;                                                         // cmd_demux_001:src9_valid -> cmd_mux_009:sink0_valid
	wire  [116:0] cmd_demux_001_src9_data;                                                          // cmd_demux_001:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_001_src9_ready;                                                         // cmd_mux_009:sink0_ready -> cmd_demux_001:src9_ready
	wire   [14:0] cmd_demux_001_src9_channel;                                                       // cmd_demux_001:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_001_src9_startofpacket;                                                 // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                   // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src10_valid;                                                        // cmd_demux_001:src10_valid -> cmd_mux_010:sink0_valid
	wire  [116:0] cmd_demux_001_src10_data;                                                         // cmd_demux_001:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_001_src10_ready;                                                        // cmd_mux_010:sink0_ready -> cmd_demux_001:src10_ready
	wire   [14:0] cmd_demux_001_src10_channel;                                                      // cmd_demux_001:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_001_src10_startofpacket;                                                // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                  // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src11_valid;                                                        // cmd_demux_001:src11_valid -> cmd_mux_011:sink0_valid
	wire  [116:0] cmd_demux_001_src11_data;                                                         // cmd_demux_001:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_001_src11_ready;                                                        // cmd_mux_011:sink0_ready -> cmd_demux_001:src11_ready
	wire   [14:0] cmd_demux_001_src11_channel;                                                      // cmd_demux_001:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_001_src11_startofpacket;                                                // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                  // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src12_valid;                                                        // cmd_demux_001:src12_valid -> cmd_mux_012:sink0_valid
	wire  [116:0] cmd_demux_001_src12_data;                                                         // cmd_demux_001:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_001_src12_ready;                                                        // cmd_mux_012:sink0_ready -> cmd_demux_001:src12_ready
	wire   [14:0] cmd_demux_001_src12_channel;                                                      // cmd_demux_001:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_001_src12_startofpacket;                                                // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                  // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src13_valid;                                                        // cmd_demux_001:src13_valid -> cmd_mux_013:sink0_valid
	wire  [116:0] cmd_demux_001_src13_data;                                                         // cmd_demux_001:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_001_src13_ready;                                                        // cmd_mux_013:sink0_ready -> cmd_demux_001:src13_ready
	wire   [14:0] cmd_demux_001_src13_channel;                                                      // cmd_demux_001:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_001_src13_startofpacket;                                                // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                                  // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_001_src14_valid;                                                        // cmd_demux_001:src14_valid -> cmd_mux_014:sink0_valid
	wire  [116:0] cmd_demux_001_src14_data;                                                         // cmd_demux_001:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_001_src14_ready;                                                        // cmd_mux_014:sink0_ready -> cmd_demux_001:src14_ready
	wire   [14:0] cmd_demux_001_src14_channel;                                                      // cmd_demux_001:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_001_src14_startofpacket;                                                // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                                  // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_002_src1_valid;                                                         // cmd_demux_002:src1_valid -> cmd_mux_002:sink1_valid
	wire  [116:0] cmd_demux_002_src1_data;                                                          // cmd_demux_002:src1_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_002_src1_ready;                                                         // cmd_mux_002:sink1_ready -> cmd_demux_002:src1_ready
	wire   [14:0] cmd_demux_002_src1_channel;                                                       // cmd_demux_002:src1_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_002_src1_startofpacket;                                                 // cmd_demux_002:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                   // cmd_demux_002:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_002_src2_valid;                                                         // cmd_demux_002:src2_valid -> cmd_mux_007:sink1_valid
	wire  [116:0] cmd_demux_002_src2_data;                                                          // cmd_demux_002:src2_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_002_src2_ready;                                                         // cmd_mux_007:sink1_ready -> cmd_demux_002:src2_ready
	wire   [14:0] cmd_demux_002_src2_channel;                                                       // cmd_demux_002:src2_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_002_src2_startofpacket;                                                 // cmd_demux_002:src2_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                   // cmd_demux_002:src2_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_002_src3_valid;                                                         // cmd_demux_002:src3_valid -> cmd_mux_008:sink1_valid
	wire  [116:0] cmd_demux_002_src3_data;                                                          // cmd_demux_002:src3_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_002_src3_ready;                                                         // cmd_mux_008:sink1_ready -> cmd_demux_002:src3_ready
	wire   [14:0] cmd_demux_002_src3_channel;                                                       // cmd_demux_002:src3_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_002_src3_startofpacket;                                                 // cmd_demux_002:src3_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                   // cmd_demux_002:src3_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_002_src4_valid;                                                         // cmd_demux_002:src4_valid -> cmd_mux_009:sink1_valid
	wire  [116:0] cmd_demux_002_src4_data;                                                          // cmd_demux_002:src4_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_002_src4_ready;                                                         // cmd_mux_009:sink1_ready -> cmd_demux_002:src4_ready
	wire   [14:0] cmd_demux_002_src4_channel;                                                       // cmd_demux_002:src4_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_002_src4_startofpacket;                                                 // cmd_demux_002:src4_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                   // cmd_demux_002:src4_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                         // cmd_demux_003:src1_valid -> cmd_mux_003:sink1_valid
	wire  [116:0] cmd_demux_003_src1_data;                                                          // cmd_demux_003:src1_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_003_src1_ready;                                                         // cmd_mux_003:sink1_ready -> cmd_demux_003:src1_ready
	wire   [14:0] cmd_demux_003_src1_channel;                                                       // cmd_demux_003:src1_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                 // cmd_demux_003:src1_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                   // cmd_demux_003:src1_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                         // cmd_demux_004:src0_valid -> cmd_mux:sink4_valid
	wire   [98:0] cmd_demux_004_src0_data;                                                          // cmd_demux_004:src0_data -> cmd_mux:sink4_data
	wire          cmd_demux_004_src0_ready;                                                         // cmd_mux:sink4_ready -> cmd_demux_004:src0_ready
	wire   [14:0] cmd_demux_004_src0_channel;                                                       // cmd_demux_004:src0_channel -> cmd_mux:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                                 // cmd_demux_004:src0_startofpacket -> cmd_mux:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                   // cmd_demux_004:src0_endofpacket -> cmd_mux:sink4_endofpacket
	wire          cmd_demux_005_src1_valid;                                                         // cmd_demux_005:src1_valid -> cmd_mux_003:sink2_valid
	wire  [116:0] cmd_demux_005_src1_data;                                                          // cmd_demux_005:src1_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_005_src1_ready;                                                         // cmd_mux_003:sink2_ready -> cmd_demux_005:src1_ready
	wire   [14:0] cmd_demux_005_src1_channel;                                                       // cmd_demux_005:src1_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_005_src1_startofpacket;                                                 // cmd_demux_005:src1_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                                   // cmd_demux_005:src1_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_006_src0_valid;                                                         // cmd_demux_006:src0_valid -> cmd_mux:sink6_valid
	wire   [98:0] cmd_demux_006_src0_data;                                                          // cmd_demux_006:src0_data -> cmd_mux:sink6_data
	wire          cmd_demux_006_src0_ready;                                                         // cmd_mux:sink6_ready -> cmd_demux_006:src0_ready
	wire   [14:0] cmd_demux_006_src0_channel;                                                       // cmd_demux_006:src0_channel -> cmd_mux:sink6_channel
	wire          cmd_demux_006_src0_startofpacket;                                                 // cmd_demux_006:src0_startofpacket -> cmd_mux:sink6_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                   // cmd_demux_006:src0_endofpacket -> cmd_mux:sink6_endofpacket
	wire          rsp_demux_src4_valid;                                                             // rsp_demux:src4_valid -> rsp_mux_004:sink0_valid
	wire   [98:0] rsp_demux_src4_data;                                                              // rsp_demux:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_src4_ready;                                                             // rsp_mux_004:sink0_ready -> rsp_demux:src4_ready
	wire   [14:0] rsp_demux_src4_channel;                                                           // rsp_demux:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_src4_startofpacket;                                                     // rsp_demux:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_src4_endofpacket;                                                       // rsp_demux:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_src6_valid;                                                             // rsp_demux:src6_valid -> rsp_mux_006:sink0_valid
	wire   [98:0] rsp_demux_src6_data;                                                              // rsp_demux:src6_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_src6_ready;                                                             // rsp_mux_006:sink0_ready -> rsp_demux:src6_ready
	wire   [14:0] rsp_demux_src6_channel;                                                           // rsp_demux:src6_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_src6_startofpacket;                                                     // rsp_demux:src6_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_src6_endofpacket;                                                       // rsp_demux:src6_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> rsp_mux_001:sink1_valid
	wire  [116:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src0_ready;                                                         // rsp_mux_001:sink1_ready -> rsp_demux_001:src0_ready
	wire   [14:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	wire  [116:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src0_ready;                                                         // rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	wire   [14:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                         // rsp_demux_002:src1_valid -> rsp_mux_002:sink1_valid
	wire  [116:0] rsp_demux_002_src1_data;                                                          // rsp_demux_002:src1_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_002_src1_ready;                                                         // rsp_mux_002:sink1_ready -> rsp_demux_002:src1_ready
	wire   [14:0] rsp_demux_002_src1_channel;                                                       // rsp_demux_002:src1_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_002_src1_startofpacket;                                                 // rsp_demux_002:src1_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                   // rsp_demux_002:src1_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire  [116:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src0_ready;                                                         // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire   [14:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                         // rsp_demux_003:src1_valid -> rsp_mux_003:sink1_valid
	wire  [116:0] rsp_demux_003_src1_data;                                                          // rsp_demux_003:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_003_src1_ready;                                                         // rsp_mux_003:sink1_ready -> rsp_demux_003:src1_ready
	wire   [14:0] rsp_demux_003_src1_channel;                                                       // rsp_demux_003:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_003_src1_startofpacket;                                                 // rsp_demux_003:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                   // rsp_demux_003:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_003_src2_valid;                                                         // rsp_demux_003:src2_valid -> rsp_mux_005:sink1_valid
	wire  [116:0] rsp_demux_003_src2_data;                                                          // rsp_demux_003:src2_data -> rsp_mux_005:sink1_data
	wire          rsp_demux_003_src2_ready;                                                         // rsp_mux_005:sink1_ready -> rsp_demux_003:src2_ready
	wire   [14:0] rsp_demux_003_src2_channel;                                                       // rsp_demux_003:src2_channel -> rsp_mux_005:sink1_channel
	wire          rsp_demux_003_src2_startofpacket;                                                 // rsp_demux_003:src2_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                   // rsp_demux_003:src2_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                         // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire  [116:0] rsp_demux_004_src0_data;                                                          // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src0_ready;                                                         // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire   [14:0] rsp_demux_004_src0_channel;                                                       // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                 // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                   // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                         // rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	wire  [116:0] rsp_demux_005_src0_data;                                                          // rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src0_ready;                                                         // rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	wire   [14:0] rsp_demux_005_src0_channel;                                                       // rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                 // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                   // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                         // rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	wire  [116:0] rsp_demux_006_src0_data;                                                          // rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src0_ready;                                                         // rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	wire   [14:0] rsp_demux_006_src0_channel;                                                       // rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                 // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                   // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                         // rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	wire  [116:0] rsp_demux_007_src0_data;                                                          // rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src0_ready;                                                         // rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	wire   [14:0] rsp_demux_007_src0_channel;                                                       // rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                 // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                   // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                         // rsp_demux_007:src1_valid -> rsp_mux_002:sink2_valid
	wire  [116:0] rsp_demux_007_src1_data;                                                          // rsp_demux_007:src1_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_007_src1_ready;                                                         // rsp_mux_002:sink2_ready -> rsp_demux_007:src1_ready
	wire   [14:0] rsp_demux_007_src1_channel;                                                       // rsp_demux_007:src1_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_007_src1_startofpacket;                                                 // rsp_demux_007:src1_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                   // rsp_demux_007:src1_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_008_src0_valid;                                                         // rsp_demux_008:src0_valid -> rsp_mux_001:sink8_valid
	wire  [116:0] rsp_demux_008_src0_data;                                                          // rsp_demux_008:src0_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src0_ready;                                                         // rsp_mux_001:sink8_ready -> rsp_demux_008:src0_ready
	wire   [14:0] rsp_demux_008_src0_channel;                                                       // rsp_demux_008:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                 // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                   // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                         // rsp_demux_008:src1_valid -> rsp_mux_002:sink3_valid
	wire  [116:0] rsp_demux_008_src1_data;                                                          // rsp_demux_008:src1_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_008_src1_ready;                                                         // rsp_mux_002:sink3_ready -> rsp_demux_008:src1_ready
	wire   [14:0] rsp_demux_008_src1_channel;                                                       // rsp_demux_008:src1_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_008_src1_startofpacket;                                                 // rsp_demux_008:src1_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                   // rsp_demux_008:src1_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_009_src0_valid;                                                         // rsp_demux_009:src0_valid -> rsp_mux_001:sink9_valid
	wire  [116:0] rsp_demux_009_src0_data;                                                          // rsp_demux_009:src0_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src0_ready;                                                         // rsp_mux_001:sink9_ready -> rsp_demux_009:src0_ready
	wire   [14:0] rsp_demux_009_src0_channel;                                                       // rsp_demux_009:src0_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                 // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                   // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                         // rsp_demux_009:src1_valid -> rsp_mux_002:sink4_valid
	wire  [116:0] rsp_demux_009_src1_data;                                                          // rsp_demux_009:src1_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_009_src1_ready;                                                         // rsp_mux_002:sink4_ready -> rsp_demux_009:src1_ready
	wire   [14:0] rsp_demux_009_src1_channel;                                                       // rsp_demux_009:src1_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_009_src1_startofpacket;                                                 // rsp_demux_009:src1_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                   // rsp_demux_009:src1_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_010_src0_valid;                                                         // rsp_demux_010:src0_valid -> rsp_mux_001:sink10_valid
	wire  [116:0] rsp_demux_010_src0_data;                                                          // rsp_demux_010:src0_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src0_ready;                                                         // rsp_mux_001:sink10_ready -> rsp_demux_010:src0_ready
	wire   [14:0] rsp_demux_010_src0_channel;                                                       // rsp_demux_010:src0_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                 // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                   // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                         // rsp_demux_011:src0_valid -> rsp_mux_001:sink11_valid
	wire  [116:0] rsp_demux_011_src0_data;                                                          // rsp_demux_011:src0_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src0_ready;                                                         // rsp_mux_001:sink11_ready -> rsp_demux_011:src0_ready
	wire   [14:0] rsp_demux_011_src0_channel;                                                       // rsp_demux_011:src0_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                 // rsp_demux_011:src0_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                   // rsp_demux_011:src0_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                         // rsp_demux_012:src0_valid -> rsp_mux_001:sink12_valid
	wire  [116:0] rsp_demux_012_src0_data;                                                          // rsp_demux_012:src0_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src0_ready;                                                         // rsp_mux_001:sink12_ready -> rsp_demux_012:src0_ready
	wire   [14:0] rsp_demux_012_src0_channel;                                                       // rsp_demux_012:src0_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                 // rsp_demux_012:src0_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                   // rsp_demux_012:src0_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                         // rsp_demux_013:src0_valid -> rsp_mux_001:sink13_valid
	wire  [116:0] rsp_demux_013_src0_data;                                                          // rsp_demux_013:src0_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_013_src0_ready;                                                         // rsp_mux_001:sink13_ready -> rsp_demux_013:src0_ready
	wire   [14:0] rsp_demux_013_src0_channel;                                                       // rsp_demux_013:src0_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                 // rsp_demux_013:src0_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                   // rsp_demux_013:src0_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                         // rsp_demux_014:src0_valid -> rsp_mux_001:sink14_valid
	wire  [116:0] rsp_demux_014_src0_data;                                                          // rsp_demux_014:src0_data -> rsp_mux_001:sink14_data
	wire          rsp_demux_014_src0_ready;                                                         // rsp_mux_001:sink14_ready -> rsp_demux_014:src0_ready
	wire   [14:0] rsp_demux_014_src0_channel;                                                       // rsp_demux_014:src0_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                 // rsp_demux_014:src0_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                   // rsp_demux_014:src0_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:in_valid
	wire  [116:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                             // av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire   [14:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_valid;             // av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire   [98:0] av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_data;              // av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_ready;             // cmd_mux:sink0_ready -> av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [14:0] av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_channel;           // av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;     // av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;       // av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                         // cmd_demux_001:src0_valid -> nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:in_valid
	wire  [116:0] cmd_demux_001_src0_data;                                                          // cmd_demux_001:src0_data -> nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                         // nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire   [14:0] cmd_demux_001_src0_channel;                                                       // cmd_demux_001:src0_channel -> nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                 // cmd_demux_001:src0_startofpacket -> nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                   // cmd_demux_001:src0_endofpacket -> nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_valid;                   // nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire   [98:0] nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_data;                    // nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_ready;                   // cmd_mux:sink1_ready -> nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [14:0] nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_channel;                 // nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;           // nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;             // nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                         // cmd_demux_002:src0_valid -> nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:in_valid
	wire  [116:0] cmd_demux_002_src0_data;                                                          // cmd_demux_002:src0_data -> nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                         // nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire   [14:0] cmd_demux_002_src0_channel;                                                       // cmd_demux_002:src0_channel -> nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                 // cmd_demux_002:src0_startofpacket -> nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                   // cmd_demux_002:src0_endofpacket -> nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid;            // nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux:sink2_valid
	wire   [98:0] nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_data;             // nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux:sink2_data
	wire          nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready;            // cmd_mux:sink2_ready -> nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [14:0] nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel;          // nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux:sink2_channel
	wire          nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;    // nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;      // nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                         // cmd_demux_003:src0_valid -> dma_read_master_to_sdram_s1_cmd_width_adapter:in_valid
	wire  [116:0] cmd_demux_003_src0_data;                                                          // cmd_demux_003:src0_data -> dma_read_master_to_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_003_src0_ready;                                                         // dma_read_master_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_003:src0_ready
	wire   [14:0] cmd_demux_003_src0_channel;                                                       // cmd_demux_003:src0_channel -> dma_read_master_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                                 // cmd_demux_003:src0_startofpacket -> dma_read_master_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                   // cmd_demux_003:src0_endofpacket -> dma_read_master_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          dma_read_master_to_sdram_s1_cmd_width_adapter_src_valid;                          // dma_read_master_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux:sink3_valid
	wire   [98:0] dma_read_master_to_sdram_s1_cmd_width_adapter_src_data;                           // dma_read_master_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux:sink3_data
	wire          dma_read_master_to_sdram_s1_cmd_width_adapter_src_ready;                          // cmd_mux:sink3_ready -> dma_read_master_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [14:0] dma_read_master_to_sdram_s1_cmd_width_adapter_src_channel;                        // dma_read_master_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux:sink3_channel
	wire          dma_read_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                  // dma_read_master_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink3_startofpacket
	wire          dma_read_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                    // dma_read_master_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_005_src0_valid;                                                         // cmd_demux_005:src0_valid -> dma_write_master_to_sdram_s1_cmd_width_adapter:in_valid
	wire  [116:0] cmd_demux_005_src0_data;                                                          // cmd_demux_005:src0_data -> dma_write_master_to_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_005_src0_ready;                                                         // dma_write_master_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_005:src0_ready
	wire   [14:0] cmd_demux_005_src0_channel;                                                       // cmd_demux_005:src0_channel -> dma_write_master_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_005_src0_startofpacket;                                                 // cmd_demux_005:src0_startofpacket -> dma_write_master_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                   // cmd_demux_005:src0_endofpacket -> dma_write_master_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          dma_write_master_to_sdram_s1_cmd_width_adapter_src_valid;                         // dma_write_master_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux:sink5_valid
	wire   [98:0] dma_write_master_to_sdram_s1_cmd_width_adapter_src_data;                          // dma_write_master_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux:sink5_data
	wire          dma_write_master_to_sdram_s1_cmd_width_adapter_src_ready;                         // cmd_mux:sink5_ready -> dma_write_master_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [14:0] dma_write_master_to_sdram_s1_cmd_width_adapter_src_channel;                       // dma_write_master_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux:sink5_channel
	wire          dma_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                 // dma_write_master_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink5_startofpacket
	wire          dma_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                   // dma_write_master_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink5_endofpacket
	wire          cmd_demux_006_src1_valid;                                                         // cmd_demux_006:src1_valid -> dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:in_valid
	wire   [98:0] cmd_demux_006_src1_data;                                                          // cmd_demux_006:src1_data -> dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:in_data
	wire          cmd_demux_006_src1_ready;                                                         // dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:in_ready -> cmd_demux_006:src1_ready
	wire   [14:0] cmd_demux_006_src1_channel;                                                       // cmd_demux_006:src1_channel -> dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_006_src1_startofpacket;                                                 // cmd_demux_006:src1_startofpacket -> dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_006_src1_endofpacket;                                                   // cmd_demux_006:src1_endofpacket -> dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:in_endofpacket
	wire          dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_valid;           // dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:out_valid -> cmd_mux_001:sink1_valid
	wire  [116:0] dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_data;            // dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:out_data -> cmd_mux_001:sink1_data
	wire          dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_ready;           // cmd_mux_001:sink1_ready -> dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:out_ready
	wire   [14:0] dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_channel;         // dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:out_channel -> cmd_mux_001:sink1_channel
	wire          dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_startofpacket;   // dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_endofpacket;     // dma_LCD_write_master_to_ILI9341SPI_a_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:in_valid
	wire   [98:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                             // sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire   [14:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_valid;             // sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire  [116:0] sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_data;              // sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_ready;             // rsp_mux:sink0_ready -> sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:out_ready
	wire   [14:0] sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_channel;           // sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_startofpacket;     // sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_endofpacket;       // sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                             // rsp_demux:src1_valid -> sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:in_valid
	wire   [98:0] rsp_demux_src1_data;                                                              // rsp_demux:src1_data -> sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                             // sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire   [14:0] rsp_demux_src1_channel;                                                           // rsp_demux:src1_channel -> sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                     // rsp_demux:src1_startofpacket -> sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                       // rsp_demux:src1_endofpacket -> sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_valid;                   // sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [116:0] sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_data;                    // sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_ready;                   // rsp_mux_001:sink0_ready -> sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:out_ready
	wire   [14:0] sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_channel;                 // sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_startofpacket;           // sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_endofpacket;             // sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                             // rsp_demux:src2_valid -> sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:in_valid
	wire   [98:0] rsp_demux_src2_data;                                                              // rsp_demux:src2_data -> sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:in_data
	wire          rsp_demux_src2_ready;                                                             // sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:in_ready -> rsp_demux:src2_ready
	wire   [14:0] rsp_demux_src2_channel;                                                           // rsp_demux:src2_channel -> sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src2_startofpacket;                                                     // rsp_demux:src2_startofpacket -> sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                       // rsp_demux:src2_endofpacket -> sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_valid;            // sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire  [116:0] sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_data;             // sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_ready;            // rsp_mux_002:sink0_ready -> sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:out_ready
	wire   [14:0] sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_channel;          // sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_startofpacket;    // sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_endofpacket;      // sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                             // rsp_demux:src3_valid -> sdram_s1_to_dma_read_master_rsp_width_adapter:in_valid
	wire   [98:0] rsp_demux_src3_data;                                                              // rsp_demux:src3_data -> sdram_s1_to_dma_read_master_rsp_width_adapter:in_data
	wire          rsp_demux_src3_ready;                                                             // sdram_s1_to_dma_read_master_rsp_width_adapter:in_ready -> rsp_demux:src3_ready
	wire   [14:0] rsp_demux_src3_channel;                                                           // rsp_demux:src3_channel -> sdram_s1_to_dma_read_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src3_startofpacket;                                                     // rsp_demux:src3_startofpacket -> sdram_s1_to_dma_read_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                       // rsp_demux:src3_endofpacket -> sdram_s1_to_dma_read_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_dma_read_master_rsp_width_adapter_src_valid;                          // sdram_s1_to_dma_read_master_rsp_width_adapter:out_valid -> rsp_mux_003:sink0_valid
	wire  [116:0] sdram_s1_to_dma_read_master_rsp_width_adapter_src_data;                           // sdram_s1_to_dma_read_master_rsp_width_adapter:out_data -> rsp_mux_003:sink0_data
	wire          sdram_s1_to_dma_read_master_rsp_width_adapter_src_ready;                          // rsp_mux_003:sink0_ready -> sdram_s1_to_dma_read_master_rsp_width_adapter:out_ready
	wire   [14:0] sdram_s1_to_dma_read_master_rsp_width_adapter_src_channel;                        // sdram_s1_to_dma_read_master_rsp_width_adapter:out_channel -> rsp_mux_003:sink0_channel
	wire          sdram_s1_to_dma_read_master_rsp_width_adapter_src_startofpacket;                  // sdram_s1_to_dma_read_master_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          sdram_s1_to_dma_read_master_rsp_width_adapter_src_endofpacket;                    // sdram_s1_to_dma_read_master_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_src5_valid;                                                             // rsp_demux:src5_valid -> sdram_s1_to_dma_write_master_rsp_width_adapter:in_valid
	wire   [98:0] rsp_demux_src5_data;                                                              // rsp_demux:src5_data -> sdram_s1_to_dma_write_master_rsp_width_adapter:in_data
	wire          rsp_demux_src5_ready;                                                             // sdram_s1_to_dma_write_master_rsp_width_adapter:in_ready -> rsp_demux:src5_ready
	wire   [14:0] rsp_demux_src5_channel;                                                           // rsp_demux:src5_channel -> sdram_s1_to_dma_write_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src5_startofpacket;                                                     // rsp_demux:src5_startofpacket -> sdram_s1_to_dma_write_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src5_endofpacket;                                                       // rsp_demux:src5_endofpacket -> sdram_s1_to_dma_write_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_dma_write_master_rsp_width_adapter_src_valid;                         // sdram_s1_to_dma_write_master_rsp_width_adapter:out_valid -> rsp_mux_005:sink0_valid
	wire  [116:0] sdram_s1_to_dma_write_master_rsp_width_adapter_src_data;                          // sdram_s1_to_dma_write_master_rsp_width_adapter:out_data -> rsp_mux_005:sink0_data
	wire          sdram_s1_to_dma_write_master_rsp_width_adapter_src_ready;                         // rsp_mux_005:sink0_ready -> sdram_s1_to_dma_write_master_rsp_width_adapter:out_ready
	wire   [14:0] sdram_s1_to_dma_write_master_rsp_width_adapter_src_channel;                       // sdram_s1_to_dma_write_master_rsp_width_adapter:out_channel -> rsp_mux_005:sink0_channel
	wire          sdram_s1_to_dma_write_master_rsp_width_adapter_src_startofpacket;                 // sdram_s1_to_dma_write_master_rsp_width_adapter:out_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          sdram_s1_to_dma_write_master_rsp_width_adapter_src_endofpacket;                   // sdram_s1_to_dma_write_master_rsp_width_adapter:out_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                         // rsp_demux_001:src1_valid -> ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:in_valid
	wire  [116:0] rsp_demux_001_src1_data;                                                          // rsp_demux_001:src1_data -> ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:in_data
	wire          rsp_demux_001_src1_ready;                                                         // ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire   [14:0] rsp_demux_001_src1_channel;                                                       // rsp_demux_001:src1_channel -> ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                 // rsp_demux_001:src1_startofpacket -> ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                   // rsp_demux_001:src1_endofpacket -> ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:in_endofpacket
	wire          ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_valid;           // ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:out_valid -> rsp_mux_006:sink1_valid
	wire   [98:0] ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_data;            // ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:out_data -> rsp_mux_006:sink1_data
	wire          ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_ready;           // rsp_mux_006:sink1_ready -> ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:out_ready
	wire   [14:0] ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_channel;         // ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:out_channel -> rsp_mux_006:sink1_channel
	wire          ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_startofpacket;   // ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:out_startofpacket -> rsp_mux_006:sink1_startofpacket
	wire          ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_endofpacket;     // ILI9341SPI_a_slave_to_dma_LCD_write_master_rsp_width_adapter:out_endofpacket -> rsp_mux_006:sink1_endofpacket
	wire   [14:0] dma_read_master_limiter_cmd_valid_data;                                           // dma_read_master_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                              // sdram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                               // sdram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter:in_0_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                    // avalon_st_adapter:out_0_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                     // avalon_st_adapter:out_0_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                    // sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                    // avalon_st_adapter:out_0_error -> sdram_s1_agent:rdata_fifo_sink_error
	wire          ili9341spi_a_slave_agent_rdata_fifo_src_valid;                                    // ILI9341SPI_a_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] ili9341spi_a_slave_agent_rdata_fifo_src_data;                                     // ILI9341SPI_a_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          ili9341spi_a_slave_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_001:in_0_ready -> ILI9341SPI_a_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                // avalon_st_adapter_001:out_0_valid -> ILI9341SPI_a_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                 // avalon_st_adapter_001:out_0_data -> ILI9341SPI_a_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                // ILI9341SPI_a_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                // avalon_st_adapter_001:out_0_error -> ILI9341SPI_a_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_002:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                // avalon_st_adapter_002:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                 // avalon_st_adapter_002:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                // avalon_st_adapter_002:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          ft245_avalon_slave_agent_rdata_fifo_src_valid;                                    // ft245_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] ft245_avalon_slave_agent_rdata_fifo_src_data;                                     // ft245_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          ft245_avalon_slave_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_003:in_0_ready -> ft245_avalon_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                // avalon_st_adapter_003:out_0_valid -> ft245_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                 // avalon_st_adapter_003:out_0_data -> ft245_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                // ft245_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                // avalon_st_adapter_003:out_0_error -> ft245_avalon_slave_agent:rdata_fifo_sink_error
	wire          dma_control_port_slave_agent_rdata_fifo_src_valid;                                // dma_control_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] dma_control_port_slave_agent_rdata_fifo_src_data;                                 // dma_control_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          dma_control_port_slave_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_004:in_0_ready -> dma_control_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                // avalon_st_adapter_004:out_0_valid -> dma_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                 // avalon_st_adapter_004:out_0_data -> dma_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                // dma_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                // avalon_st_adapter_004:out_0_error -> dma_control_port_slave_agent:rdata_fifo_sink_error
	wire          dma_lcd_control_port_slave_agent_rdata_fifo_src_valid;                            // dma_LCD_control_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] dma_lcd_control_port_slave_agent_rdata_fifo_src_data;                             // dma_LCD_control_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          dma_lcd_control_port_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_005:in_0_ready -> dma_LCD_control_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                // avalon_st_adapter_005:out_0_valid -> dma_LCD_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                 // avalon_st_adapter_005:out_0_data -> dma_LCD_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                // dma_LCD_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                // avalon_st_adapter_005:out_0_error -> dma_LCD_control_port_slave_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                   // sysid_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                    // sysid_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_006:in_0_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                // avalon_st_adapter_006:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                 // avalon_st_adapter_006:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                // avalon_st_adapter_006:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire          onchip_flash_data_agent_rdata_fifo_src_valid;                                     // onchip_flash_data_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] onchip_flash_data_agent_rdata_fifo_src_data;                                      // onchip_flash_data_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          onchip_flash_data_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_007:in_0_ready -> onchip_flash_data_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                // avalon_st_adapter_007:out_0_valid -> onchip_flash_data_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                 // avalon_st_adapter_007:out_0_data -> onchip_flash_data_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                // onchip_flash_data_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                // avalon_st_adapter_007:out_0_error -> onchip_flash_data_agent:rdata_fifo_sink_error
	wire          nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_008:in_0_ready -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                // avalon_st_adapter_008:out_0_valid -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                 // avalon_st_adapter_008:out_0_data -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                // nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                // avalon_st_adapter_008:out_0_error -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          serialflash_epcs_control_port_agent_rdata_fifo_src_valid;                         // serialflash_epcs_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] serialflash_epcs_control_port_agent_rdata_fifo_src_data;                          // serialflash_epcs_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          serialflash_epcs_control_port_agent_rdata_fifo_src_ready;                         // avalon_st_adapter_009:in_0_ready -> serialflash_epcs_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                // avalon_st_adapter_009:out_0_valid -> serialflash_epcs_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                 // avalon_st_adapter_009:out_0_data -> serialflash_epcs_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                // serialflash_epcs_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                // avalon_st_adapter_009:out_0_error -> serialflash_epcs_control_port_agent:rdata_fifo_sink_error
	wire          pdm_s0_agent_rdata_fifo_src_valid;                                                // pdm_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] pdm_s0_agent_rdata_fifo_src_data;                                                 // pdm_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          pdm_s0_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_010:in_0_ready -> pdm_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                // avalon_st_adapter_010:out_0_valid -> pdm_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                 // avalon_st_adapter_010:out_0_data -> pdm_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                // pdm_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                // avalon_st_adapter_010:out_0_error -> pdm_s0_agent:rdata_fifo_sink_error
	wire          sys_clk_timer_s1_agent_rdata_fifo_src_valid;                                      // sys_clk_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] sys_clk_timer_s1_agent_rdata_fifo_src_data;                                       // sys_clk_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          sys_clk_timer_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_011:in_0_ready -> sys_clk_timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                // avalon_st_adapter_011:out_0_valid -> sys_clk_timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                 // avalon_st_adapter_011:out_0_data -> sys_clk_timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                // sys_clk_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                // avalon_st_adapter_011:out_0_error -> sys_clk_timer_s1_agent:rdata_fifo_sink_error
	wire          button_s1_agent_rdata_fifo_src_valid;                                             // button_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] button_s1_agent_rdata_fifo_src_data;                                              // button_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          button_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_012:in_0_ready -> button_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                // avalon_st_adapter_012:out_0_valid -> button_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                 // avalon_st_adapter_012:out_0_data -> button_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                // button_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                // avalon_st_adapter_012:out_0_error -> button_s1_agent:rdata_fifo_sink_error
	wire          debport_s1_agent_rdata_fifo_src_valid;                                            // DEBport_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] debport_s1_agent_rdata_fifo_src_data;                                             // DEBport_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          debport_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_013:in_0_ready -> DEBport_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                // avalon_st_adapter_013:out_0_valid -> DEBport_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                 // avalon_st_adapter_013:out_0_data -> DEBport_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                // DEBport_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                // avalon_st_adapter_013:out_0_error -> DEBport_s1_agent:rdata_fifo_sink_error
	wire          led_s1_agent_rdata_fifo_src_valid;                                                // LED_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] led_s1_agent_rdata_fifo_src_data;                                                 // LED_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          led_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_014:in_0_ready -> LED_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                // avalon_st_adapter_014:out_0_valid -> LED_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                 // avalon_st_adapter_014:out_0_data -> LED_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                // LED_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                // avalon_st_adapter_014:out_0_error -> LED_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) av_wr_master_0_avalon_master_translator (
		.clk                    (pll_c0_clk),                                                                      //                       clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (av_wr_master_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (av_wr_master_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (av_wr_master_0_avalon_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (av_wr_master_0_avalon_master_byteenable),                                         //                          .byteenable
		.av_write               (av_wr_master_0_avalon_master_write),                                              //                          .write
		.av_writedata           (av_wr_master_0_avalon_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_read                (1'b0),                                                                            //               (terminated)
		.av_readdata            (),                                                                                //               (terminated)
		.av_readdatavalid       (),                                                                                //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (24),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_gen2_data_master_translator (
		.clk                    (pll_c0_clk),                                                                //                       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_gen2_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (24),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_instruction_master_translator (
		.clk                    (pll_c0_clk),                                                                       //                       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                                 //               (terminated)
		.av_write               (1'b0),                                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (24),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_read_master_translator (
		.clk                    (pll_c0_clk),                                                         //                       clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),              //                     reset.reset
		.uav_address            (dma_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (dma_read_master_chipselect),                                         //                          .chipselect
		.av_read                (dma_read_master_read),                                               //                          .read
		.av_readdata            (dma_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_write               (1'b0),                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (24),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_lcd_read_master_translator (
		.clk                    (pll_c0_clk),                                                             //                       clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (dma_lcd_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_lcd_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_lcd_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_lcd_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_lcd_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_lcd_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_lcd_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_lcd_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_lcd_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_lcd_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_lcd_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_LCD_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_LCD_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (dma_LCD_read_master_chipselect),                                         //                          .chipselect
		.av_read                (dma_LCD_read_master_read),                                               //                          .read
		.av_readdata            (dma_LCD_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_LCD_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                   //               (terminated)
		.av_byteenable          (2'b11),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                   //               (terminated)
		.av_write               (1'b0),                                                                   //               (terminated)
		.av_writedata           (16'b0000000000000000),                                                   //               (terminated)
		.av_lock                (1'b0),                                                                   //               (terminated)
		.av_debugaccess         (1'b0),                                                                   //               (terminated)
		.uav_clken              (),                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                  //               (terminated)
		.av_response            (),                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                        //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (24),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_write_master_translator (
		.clk                    (pll_c0_clk),                                                          //                       clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),               //                     reset.reset
		.uav_address            (dma_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (dma_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (dma_write_master_chipselect),                                         //                          .chipselect
		.av_write               (dma_write_master_write),                                              //                          .write
		.av_writedata           (dma_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                //               (terminated)
		.av_read                (1'b0),                                                                //               (terminated)
		.av_readdata            (),                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                //               (terminated)
		.uav_clken              (),                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                //               (terminated)
		.uav_response           (2'b00),                                                               //               (terminated)
		.av_response            (),                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (24),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_lcd_write_master_translator (
		.clk                    (pll_c0_clk),                                                              //                       clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (dma_lcd_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_lcd_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_lcd_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_lcd_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_lcd_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_lcd_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_lcd_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_lcd_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_lcd_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_lcd_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_lcd_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_LCD_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_LCD_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (dma_LCD_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (dma_LCD_write_master_chipselect),                                         //                          .chipselect
		.av_write               (dma_LCD_write_master_write),                                              //                          .write
		.av_writedata           (dma_LCD_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_read                (1'b0),                                                                    //               (terminated)
		.av_readdata            (),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (22),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (pll_c0_clk),                                   //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                       //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (sdram_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                               //                         .write
		.av_read                (sdram_s1_read),                                //                         .read
		.av_readdata            (sdram_s1_readdata),                            //                         .readdata
		.av_writedata           (sdram_s1_writedata),                           //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                          //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                       //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                         //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                          //                         .chipselect
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ili9341spi_a_slave_translator (
		.clk                    (pll_c0_clk),                                            //                      clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ili9341spi_a_slave_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (ili9341spi_a_slave_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (ili9341spi_a_slave_agent_m0_read),                      //                         .read
		.uav_write              (ili9341spi_a_slave_agent_m0_write),                     //                         .write
		.uav_waitrequest        (ili9341spi_a_slave_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (ili9341spi_a_slave_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (ili9341spi_a_slave_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (ili9341spi_a_slave_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (ili9341spi_a_slave_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (ili9341spi_a_slave_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (ili9341spi_a_slave_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (ILI9341SPI_a_slave_address),                            //      avalon_anti_slave_0.address
		.av_write               (ILI9341SPI_a_slave_write),                              //                         .write
		.av_writedata           (ILI9341SPI_a_slave_writedata),                          //                         .writedata
		.av_byteenable          (ILI9341SPI_a_slave_byteenable),                         //                         .byteenable
		.av_waitrequest         (ILI9341SPI_a_slave_waitrequest),                        //                         .waitrequest
		.av_chipselect          (ILI9341SPI_a_slave_chipselect),                         //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),                  //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (pll_c0_clk),                                         //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ft245_avalon_slave_translator (
		.clk                    (pll_c0_clk),                                            //                      clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ft245_avalon_slave_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (ft245_avalon_slave_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (ft245_avalon_slave_agent_m0_read),                      //                         .read
		.uav_write              (ft245_avalon_slave_agent_m0_write),                     //                         .write
		.uav_waitrequest        (ft245_avalon_slave_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (ft245_avalon_slave_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (ft245_avalon_slave_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (ft245_avalon_slave_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (ft245_avalon_slave_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (ft245_avalon_slave_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (ft245_avalon_slave_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (ft245_avalon_slave_address),                            //      avalon_anti_slave_0.address
		.av_write               (ft245_avalon_slave_write),                              //                         .write
		.av_read                (ft245_avalon_slave_read),                               //                         .read
		.av_readdata            (ft245_avalon_slave_readdata),                           //                         .readdata
		.av_writedata           (ft245_avalon_slave_writedata),                          //                         .writedata
		.av_byteenable          (ft245_avalon_slave_byteenable),                         //                         .byteenable
		.av_waitrequest         (ft245_avalon_slave_waitrequest),                        //                         .waitrequest
		.av_chipselect          (ft245_avalon_slave_chipselect),                         //                         .chipselect
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (24),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_control_port_slave_translator (
		.clk                    (pll_c0_clk),                                            //                      clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_control_port_slave_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (dma_control_port_slave_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (dma_control_port_slave_agent_m0_read),                  //                         .read
		.uav_write              (dma_control_port_slave_agent_m0_write),                 //                         .write
		.uav_waitrequest        (dma_control_port_slave_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (dma_control_port_slave_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (dma_control_port_slave_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (dma_control_port_slave_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (dma_control_port_slave_agent_m0_writedata),             //                         .writedata
		.uav_lock               (dma_control_port_slave_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (dma_control_port_slave_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (dma_control_port_slave_address),                        //      avalon_anti_slave_0.address
		.av_write               (dma_control_port_slave_write),                          //                         .write
		.av_readdata            (dma_control_port_slave_readdata),                       //                         .readdata
		.av_writedata           (dma_control_port_slave_writedata),                      //                         .writedata
		.av_chipselect          (dma_control_port_slave_chipselect),                     //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (24),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_lcd_control_port_slave_translator (
		.clk                    (pll_c0_clk),                                            //                      clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_lcd_control_port_slave_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (dma_lcd_control_port_slave_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (dma_lcd_control_port_slave_agent_m0_read),              //                         .read
		.uav_write              (dma_lcd_control_port_slave_agent_m0_write),             //                         .write
		.uav_waitrequest        (dma_lcd_control_port_slave_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (dma_lcd_control_port_slave_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (dma_lcd_control_port_slave_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (dma_lcd_control_port_slave_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (dma_lcd_control_port_slave_agent_m0_writedata),         //                         .writedata
		.uav_lock               (dma_lcd_control_port_slave_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (dma_lcd_control_port_slave_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (dma_LCD_control_port_slave_address),                    //      avalon_anti_slave_0.address
		.av_write               (dma_LCD_control_port_slave_write),                      //                         .write
		.av_readdata            (dma_LCD_control_port_slave_readdata),                   //                         .readdata
		.av_writedata           (dma_LCD_control_port_slave_writedata),                  //                         .writedata
		.av_chipselect          (dma_LCD_control_port_slave_chipselect),                 //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (pll_c0_clk),                                   //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),            //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),           //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),       //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (sysid_control_slave_address),                  //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),                 //                         .readdata
		.av_write               (),                                             //              (terminated)
		.av_read                (),                                             //              (terminated)
		.av_writedata           (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_flash_data_translator (
		.clk                    (pll_c0_clk),                                   //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_flash_data_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_flash_data_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (onchip_flash_data_agent_m0_read),              //                         .read
		.uav_write              (onchip_flash_data_agent_m0_write),             //                         .write
		.uav_waitrequest        (onchip_flash_data_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (onchip_flash_data_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (onchip_flash_data_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (onchip_flash_data_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (onchip_flash_data_agent_m0_writedata),         //                         .writedata
		.uav_lock               (onchip_flash_data_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (onchip_flash_data_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (onchip_flash_data_address),                    //      avalon_anti_slave_0.address
		.av_write               (onchip_flash_data_write),                      //                         .write
		.av_read                (onchip_flash_data_read),                       //                         .read
		.av_readdata            (onchip_flash_data_readdata),                   //                         .readdata
		.av_writedata           (onchip_flash_data_writedata),                  //                         .writedata
		.av_burstcount          (onchip_flash_data_burstcount),                 //                         .burstcount
		.av_readdatavalid       (onchip_flash_data_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (onchip_flash_data_waitrequest),                //                         .waitrequest
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_debug_mem_slave_translator (
		.clk                    (pll_c0_clk),                                        //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) serialflash_epcs_control_port_translator (
		.clk                    (pll_c0_clk),                                           //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (serialflash_epcs_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (serialflash_epcs_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (serialflash_epcs_control_port_agent_m0_read),          //                         .read
		.uav_write              (serialflash_epcs_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (serialflash_epcs_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (serialflash_epcs_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (serialflash_epcs_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (serialflash_epcs_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (serialflash_epcs_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (serialflash_epcs_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (serialflash_epcs_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (serialflash_epcs_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (serialflash_epcs_control_port_write),                  //                         .write
		.av_read                (serialflash_epcs_control_port_read),                   //                         .read
		.av_readdata            (serialflash_epcs_control_port_readdata),               //                         .readdata
		.av_writedata           (serialflash_epcs_control_port_writedata),              //                         .writedata
		.av_chipselect          (serialflash_epcs_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pdm_s0_translator (
		.clk                    (pll_c0_clk),                                            //                      clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pdm_s0_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (pdm_s0_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (pdm_s0_agent_m0_read),                                  //                         .read
		.uav_write              (pdm_s0_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (pdm_s0_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (pdm_s0_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (pdm_s0_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (pdm_s0_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (pdm_s0_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (pdm_s0_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (pdm_s0_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (pdm_s0_address),                                        //      avalon_anti_slave_0.address
		.av_write               (pdm_s0_write),                                          //                         .write
		.av_read                (pdm_s0_read),                                           //                         .read
		.av_readdata            (pdm_s0_readdata),                                       //                         .readdata
		.av_writedata           (pdm_s0_writedata),                                      //                         .writedata
		.av_byteenable          (pdm_s0_byteenable),                                     //                         .byteenable
		.av_chipselect          (pdm_s0_chipselect),                                     //                         .chipselect
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_clk_timer_s1_translator (
		.clk                    (pll_c0_clk),                                   //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_clk_timer_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (sys_clk_timer_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (sys_clk_timer_s1_agent_m0_read),               //                         .read
		.uav_write              (sys_clk_timer_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (sys_clk_timer_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (sys_clk_timer_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (sys_clk_timer_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (sys_clk_timer_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (sys_clk_timer_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (sys_clk_timer_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (sys_clk_timer_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (sys_clk_timer_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (sys_clk_timer_s1_write),                       //                         .write
		.av_readdata            (sys_clk_timer_s1_readdata),                    //                         .readdata
		.av_writedata           (sys_clk_timer_s1_writedata),                   //                         .writedata
		.av_chipselect          (sys_clk_timer_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_s1_translator (
		.clk                    (pll_c0_clk),                                   //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (button_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (button_s1_agent_m0_read),                      //                         .read
		.uav_write              (button_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (button_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (button_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (button_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (button_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (button_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (button_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (button_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (button_s1_address),                            //      avalon_anti_slave_0.address
		.av_readdata            (button_s1_readdata),                           //                         .readdata
		.av_write               (),                                             //              (terminated)
		.av_read                (),                                             //              (terminated)
		.av_writedata           (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) debport_s1_translator (
		.clk                    (pll_c0_clk),                                            //                      clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (debport_s1_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount         (debport_s1_agent_m0_burstcount),                        //                         .burstcount
		.uav_read               (debport_s1_agent_m0_read),                              //                         .read
		.uav_write              (debport_s1_agent_m0_write),                             //                         .write
		.uav_waitrequest        (debport_s1_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid      (debport_s1_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable         (debport_s1_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata           (debport_s1_agent_m0_readdata),                          //                         .readdata
		.uav_writedata          (debport_s1_agent_m0_writedata),                         //                         .writedata
		.uav_lock               (debport_s1_agent_m0_lock),                              //                         .lock
		.uav_debugaccess        (debport_s1_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address             (DEBport_s1_address),                                    //      avalon_anti_slave_0.address
		.av_write               (DEBport_s1_write),                                      //                         .write
		.av_readdata            (DEBport_s1_readdata),                                   //                         .readdata
		.av_writedata           (DEBport_s1_writedata),                                  //                         .writedata
		.av_chipselect          (DEBport_s1_chipselect),                                 //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (pll_c0_clk),                                            //                      clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                                  //                         .read
		.uav_write              (led_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (LED_s1_address),                                        //      avalon_anti_slave_0.address
		.av_write               (LED_s1_write),                                          //                         .write
		.av_readdata            (LED_s1_readdata),                                       //                         .readdata
		.av_writedata           (LED_s1_writedata),                                      //                         .writedata
		.av_chipselect          (LED_s1_chipselect),                                     //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) av_wr_master_0_avalon_master_agent (
		.clk                   (pll_c0_clk),                                                                      //       clk.clk
		.reset                 (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (av_wr_master_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (av_wr_master_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (av_wr_master_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (av_wr_master_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (av_wr_master_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (av_wr_master_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                               //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                //          .data
		.rp_channel            (rsp_mux_src_channel),                                                             //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                         //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                               //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_data_master_agent (
		.clk                   (pll_c0_clk),                                                                //       clk.clk
		.reset                 (nios2_gen2_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_instruction_master_agent (
		.clk                   (pll_c0_clk),                                                                       //       clk.clk
		.reset                 (nios2_gen2_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                            //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                             //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                          //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                    //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                      //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                            //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_read_master_agent (
		.clk                   (pll_c0_clk),                                                         //       clk.clk
		.reset                 (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),              // clk_reset.reset
		.av_address            (dma_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (dma_read_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (dma_read_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (dma_read_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (dma_read_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (dma_read_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (dma_read_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_QOS_H                 (77),
		.PKT_QOS_L                 (77),
		.PKT_DATA_SIDEBAND_H       (75),
		.PKT_DATA_SIDEBAND_L       (75),
		.PKT_ADDR_SIDEBAND_H       (74),
		.PKT_ADDR_SIDEBAND_L       (74),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (82),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_lcd_read_master_agent (
		.clk                   (pll_c0_clk),                                                             //       clk.clk
		.reset                 (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (dma_lcd_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_lcd_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_lcd_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_lcd_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_lcd_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_lcd_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_lcd_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_lcd_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_lcd_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_lcd_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_lcd_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_lcd_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_lcd_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_lcd_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_lcd_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_lcd_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                  //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                   //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                          //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                            //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                  //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_write_master_agent (
		.clk                   (pll_c0_clk),                                                          //       clk.clk
		.reset                 (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.av_address            (dma_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                               //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                             //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                         //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                               //          .ready
		.av_response           (),                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_QOS_H                 (77),
		.PKT_QOS_L                 (77),
		.PKT_DATA_SIDEBAND_H       (75),
		.PKT_DATA_SIDEBAND_L       (75),
		.PKT_ADDR_SIDEBAND_H       (74),
		.PKT_ADDR_SIDEBAND_L       (74),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (82),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_lcd_write_master_agent (
		.clk                   (pll_c0_clk),                                                              //       clk.clk
		.reset                 (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (dma_lcd_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_lcd_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_lcd_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_lcd_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_lcd_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_lcd_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_lcd_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_lcd_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_lcd_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_lcd_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_lcd_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_lcd_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_lcd_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_lcd_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_lcd_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_lcd_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                   //        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                    //          .data
		.rp_channel            (rsp_mux_006_src_channel),                                                 //          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                             //          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready),                                                   //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (pll_c0_clk),                                   //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                   //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (pll_c0_clk),                                   //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ili9341spi_a_slave_agent (
		.clk                     (pll_c0_clk),                                            //             clk.clk
		.reset                   (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ili9341spi_a_slave_agent_m0_address),                   //              m0.address
		.m0_burstcount           (ili9341spi_a_slave_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (ili9341spi_a_slave_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (ili9341spi_a_slave_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (ili9341spi_a_slave_agent_m0_lock),                      //                .lock
		.m0_readdata             (ili9341spi_a_slave_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (ili9341spi_a_slave_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (ili9341spi_a_slave_agent_m0_read),                      //                .read
		.m0_waitrequest          (ili9341spi_a_slave_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (ili9341spi_a_slave_agent_m0_writedata),                 //                .writedata
		.m0_write                (ili9341spi_a_slave_agent_m0_write),                     //                .write
		.rp_endofpacket          (ili9341spi_a_slave_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (ili9341spi_a_slave_agent_rp_ready),                     //                .ready
		.rp_valid                (ili9341spi_a_slave_agent_rp_valid),                     //                .valid
		.rp_data                 (ili9341spi_a_slave_agent_rp_data),                      //                .data
		.rp_startofpacket        (ili9341spi_a_slave_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                               //                .channel
		.rf_sink_ready           (ili9341spi_a_slave_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (ili9341spi_a_slave_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (ili9341spi_a_slave_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (ili9341spi_a_slave_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (ili9341spi_a_slave_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (ili9341spi_a_slave_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (ili9341spi_a_slave_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (ili9341spi_a_slave_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (ili9341spi_a_slave_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (ili9341spi_a_slave_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (ili9341spi_a_slave_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ili9341spi_a_slave_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (ili9341spi_a_slave_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ili9341spi_a_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                            //       clk.clk
		.reset             (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ili9341spi_a_slave_agent_rf_source_data),               //        in.data
		.in_valid          (ili9341spi_a_slave_agent_rf_source_valid),              //          .valid
		.in_ready          (ili9341spi_a_slave_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (ili9341spi_a_slave_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (ili9341spi_a_slave_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (ili9341spi_a_slave_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (ili9341spi_a_slave_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (ili9341spi_a_slave_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (ili9341spi_a_slave_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (ili9341spi_a_slave_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (pll_c0_clk),                                                   //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                   //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ft245_avalon_slave_agent (
		.clk                     (pll_c0_clk),                                            //             clk.clk
		.reset                   (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ft245_avalon_slave_agent_m0_address),                   //              m0.address
		.m0_burstcount           (ft245_avalon_slave_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (ft245_avalon_slave_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (ft245_avalon_slave_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (ft245_avalon_slave_agent_m0_lock),                      //                .lock
		.m0_readdata             (ft245_avalon_slave_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (ft245_avalon_slave_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (ft245_avalon_slave_agent_m0_read),                      //                .read
		.m0_waitrequest          (ft245_avalon_slave_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (ft245_avalon_slave_agent_m0_writedata),                 //                .writedata
		.m0_write                (ft245_avalon_slave_agent_m0_write),                     //                .write
		.rp_endofpacket          (ft245_avalon_slave_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (ft245_avalon_slave_agent_rp_ready),                     //                .ready
		.rp_valid                (ft245_avalon_slave_agent_rp_valid),                     //                .valid
		.rp_data                 (ft245_avalon_slave_agent_rp_data),                      //                .data
		.rp_startofpacket        (ft245_avalon_slave_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                               //                .channel
		.rf_sink_ready           (ft245_avalon_slave_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (ft245_avalon_slave_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (ft245_avalon_slave_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (ft245_avalon_slave_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (ft245_avalon_slave_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (ft245_avalon_slave_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (ft245_avalon_slave_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (ft245_avalon_slave_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (ft245_avalon_slave_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (ft245_avalon_slave_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (ft245_avalon_slave_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ft245_avalon_slave_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (ft245_avalon_slave_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ft245_avalon_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                            //       clk.clk
		.reset             (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ft245_avalon_slave_agent_rf_source_data),               //        in.data
		.in_valid          (ft245_avalon_slave_agent_rf_source_valid),              //          .valid
		.in_ready          (ft245_avalon_slave_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (ft245_avalon_slave_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (ft245_avalon_slave_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (ft245_avalon_slave_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (ft245_avalon_slave_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (ft245_avalon_slave_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (ft245_avalon_slave_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (ft245_avalon_slave_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_control_port_slave_agent (
		.clk                     (pll_c0_clk),                                              //             clk.clk
		.reset                   (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (dma_control_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_control_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_control_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_control_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_control_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_control_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_control_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_control_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_control_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_control_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_control_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_control_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_control_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_control_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_control_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_control_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                 //                .channel
		.rf_sink_ready           (dma_control_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_control_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_control_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_control_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_control_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_control_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_control_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_control_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_control_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_control_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (dma_control_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_control_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_control_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_control_port_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                              //       clk.clk
		.reset             (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (dma_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_lcd_control_port_slave_agent (
		.clk                     (pll_c0_clk),                                                  //             clk.clk
		.reset                   (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (dma_lcd_control_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_lcd_control_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_lcd_control_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_lcd_control_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_lcd_control_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_lcd_control_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_lcd_control_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_lcd_control_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_lcd_control_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_lcd_control_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_lcd_control_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_lcd_control_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_lcd_control_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_lcd_control_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_lcd_control_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_lcd_control_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                     //                .channel
		.rf_sink_ready           (dma_lcd_control_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_lcd_control_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_lcd_control_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_lcd_control_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_lcd_control_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_lcd_control_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_lcd_control_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_lcd_control_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_lcd_control_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_lcd_control_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (dma_lcd_control_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_lcd_control_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_lcd_control_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_lcd_control_port_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                  //       clk.clk
		.reset             (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (dma_lcd_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_lcd_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_lcd_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_lcd_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_lcd_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_lcd_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_lcd_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_lcd_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_lcd_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_lcd_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (pll_c0_clk),                                           //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                              //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                           //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_flash_data_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (onchip_flash_data_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_flash_data_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_flash_data_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_flash_data_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_flash_data_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_flash_data_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_flash_data_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_flash_data_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_flash_data_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_flash_data_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_flash_data_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_flash_data_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_flash_data_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_flash_data_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_flash_data_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_flash_data_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_007_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                            //                .channel
		.rf_sink_ready           (onchip_flash_data_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_flash_data_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_flash_data_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_flash_data_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_flash_data_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_flash_data_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_flash_data_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_flash_data_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_flash_data_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_flash_data_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (onchip_flash_data_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_flash_data_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_flash_data_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_flash_data_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (onchip_flash_data_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_flash_data_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_flash_data_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_flash_data_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_flash_data_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_flash_data_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_flash_data_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_flash_data_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_flash_data_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_flash_data_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_debug_mem_slave_agent (
		.clk                     (pll_c0_clk),                                                  //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                     //                .channel
		.rf_sink_ready           (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_debug_mem_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                  //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) serialflash_epcs_control_port_agent (
		.clk                     (pll_c0_clk),                                                     //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (serialflash_epcs_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (serialflash_epcs_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (serialflash_epcs_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (serialflash_epcs_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (serialflash_epcs_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (serialflash_epcs_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (serialflash_epcs_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (serialflash_epcs_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (serialflash_epcs_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (serialflash_epcs_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (serialflash_epcs_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (serialflash_epcs_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (serialflash_epcs_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (serialflash_epcs_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (serialflash_epcs_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (serialflash_epcs_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                        //                .channel
		.rf_sink_ready           (serialflash_epcs_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (serialflash_epcs_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (serialflash_epcs_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (serialflash_epcs_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (serialflash_epcs_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (serialflash_epcs_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (serialflash_epcs_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (serialflash_epcs_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (serialflash_epcs_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (serialflash_epcs_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (serialflash_epcs_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (serialflash_epcs_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (serialflash_epcs_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) serialflash_epcs_control_port_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                     //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (serialflash_epcs_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (serialflash_epcs_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (serialflash_epcs_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (serialflash_epcs_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (serialflash_epcs_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (serialflash_epcs_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (serialflash_epcs_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (serialflash_epcs_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (serialflash_epcs_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (serialflash_epcs_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pdm_s0_agent (
		.clk                     (pll_c0_clk),                                            //             clk.clk
		.reset                   (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pdm_s0_agent_m0_address),                               //              m0.address
		.m0_burstcount           (pdm_s0_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (pdm_s0_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (pdm_s0_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (pdm_s0_agent_m0_lock),                                  //                .lock
		.m0_readdata             (pdm_s0_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (pdm_s0_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (pdm_s0_agent_m0_read),                                  //                .read
		.m0_waitrequest          (pdm_s0_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (pdm_s0_agent_m0_writedata),                             //                .writedata
		.m0_write                (pdm_s0_agent_m0_write),                                 //                .write
		.rp_endofpacket          (pdm_s0_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (pdm_s0_agent_rp_ready),                                 //                .ready
		.rp_valid                (pdm_s0_agent_rp_valid),                                 //                .valid
		.rp_data                 (pdm_s0_agent_rp_data),                                  //                .data
		.rp_startofpacket        (pdm_s0_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                               //                .channel
		.rf_sink_ready           (pdm_s0_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (pdm_s0_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (pdm_s0_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (pdm_s0_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (pdm_s0_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (pdm_s0_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (pdm_s0_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (pdm_s0_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (pdm_s0_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (pdm_s0_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (pdm_s0_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pdm_s0_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (pdm_s0_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pdm_s0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                            //       clk.clk
		.reset             (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pdm_s0_agent_rf_source_data),                           //        in.data
		.in_valid          (pdm_s0_agent_rf_source_valid),                          //          .valid
		.in_ready          (pdm_s0_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (pdm_s0_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (pdm_s0_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (pdm_s0_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (pdm_s0_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (pdm_s0_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (pdm_s0_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (pdm_s0_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_clk_timer_s1_agent (
		.clk                     (pll_c0_clk),                                        //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sys_clk_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sys_clk_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sys_clk_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sys_clk_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sys_clk_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sys_clk_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sys_clk_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sys_clk_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sys_clk_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sys_clk_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sys_clk_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sys_clk_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sys_clk_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sys_clk_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sys_clk_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sys_clk_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_011_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                           //                .channel
		.rf_sink_ready           (sys_clk_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sys_clk_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sys_clk_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sys_clk_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sys_clk_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sys_clk_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sys_clk_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sys_clk_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sys_clk_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sys_clk_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (sys_clk_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_clk_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sys_clk_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_clk_timer_s1_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                        //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (sys_clk_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sys_clk_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sys_clk_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sys_clk_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_clk_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sys_clk_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sys_clk_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sys_clk_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sys_clk_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sys_clk_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_s1_agent (
		.clk                     (pll_c0_clk),                                   //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (button_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (button_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (button_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (button_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (button_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (button_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (button_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (button_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (button_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (button_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (button_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (button_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (button_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (button_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (button_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (button_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_012_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                      //                .channel
		.rf_sink_ready           (button_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (button_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (button_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (button_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (button_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (button_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (button_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (button_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (button_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (button_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),            //                .error
		.rdata_fifo_src_ready    (button_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (button_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_s1_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                   //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_s1_agent_rf_source_data),               //        in.data
		.in_valid          (button_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (button_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (button_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (button_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (button_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (button_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (button_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (button_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (button_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) debport_s1_agent (
		.clk                     (pll_c0_clk),                                            //             clk.clk
		.reset                   (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (debport_s1_agent_m0_address),                           //              m0.address
		.m0_burstcount           (debport_s1_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (debport_s1_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (debport_s1_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (debport_s1_agent_m0_lock),                              //                .lock
		.m0_readdata             (debport_s1_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (debport_s1_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (debport_s1_agent_m0_read),                              //                .read
		.m0_waitrequest          (debport_s1_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (debport_s1_agent_m0_writedata),                         //                .writedata
		.m0_write                (debport_s1_agent_m0_write),                             //                .write
		.rp_endofpacket          (debport_s1_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (debport_s1_agent_rp_ready),                             //                .ready
		.rp_valid                (debport_s1_agent_rp_valid),                             //                .valid
		.rp_data                 (debport_s1_agent_rp_data),                              //                .data
		.rp_startofpacket        (debport_s1_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                               //                .channel
		.rf_sink_ready           (debport_s1_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (debport_s1_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (debport_s1_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (debport_s1_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (debport_s1_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (debport_s1_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (debport_s1_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (debport_s1_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (debport_s1_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (debport_s1_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (debport_s1_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (debport_s1_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (debport_s1_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) debport_s1_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                            //       clk.clk
		.reset             (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (debport_s1_agent_rf_source_data),                       //        in.data
		.in_valid          (debport_s1_agent_rf_source_valid),                      //          .valid
		.in_ready          (debport_s1_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (debport_s1_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (debport_s1_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (debport_s1_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (debport_s1_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (debport_s1_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (debport_s1_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (debport_s1_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (pll_c0_clk),                                            //             clk.clk
		.reset                   (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (led_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (led_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                               //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                            //       clk.clk
		.reset             (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	nios_mm_interconnect_0_router router (
		.sink_ready         (av_wr_master_0_avalon_master_agent_cp_ready),           //      sink.ready
		.sink_valid         (av_wr_master_0_avalon_master_agent_cp_valid),           //          .valid
		.sink_data          (av_wr_master_0_avalon_master_agent_cp_data),            //          .data
		.sink_startofpacket (av_wr_master_0_avalon_master_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (av_wr_master_0_avalon_master_agent_cp_endofpacket),     //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                      //       src.ready
		.src_valid          (router_src_valid),                                      //          .valid
		.src_data           (router_src_data),                                       //          .data
		.src_channel        (router_src_channel),                                    //          .channel
		.src_startofpacket  (router_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                 //          .endofpacket
	);

	nios_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_gen2_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                    //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	nios_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (nios2_gen2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                           //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	nios_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (dma_read_master_agent_cp_ready),                        //      sink.ready
		.sink_valid         (dma_read_master_agent_cp_valid),                        //          .valid
		.sink_data          (dma_read_master_agent_cp_data),                         //          .data
		.sink_startofpacket (dma_read_master_agent_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (dma_read_master_agent_cp_endofpacket),                  //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                  //       src.ready
		.src_valid          (router_003_src_valid),                                  //          .valid
		.src_data           (router_003_src_data),                                   //          .data
		.src_channel        (router_003_src_channel),                                //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (dma_lcd_read_master_agent_cp_ready),                    //      sink.ready
		.sink_valid         (dma_lcd_read_master_agent_cp_valid),                    //          .valid
		.sink_data          (dma_lcd_read_master_agent_cp_data),                     //          .data
		.sink_startofpacket (dma_lcd_read_master_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (dma_lcd_read_master_agent_cp_endofpacket),              //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                  //       src.ready
		.src_valid          (router_004_src_valid),                                  //          .valid
		.src_data           (router_004_src_data),                                   //          .data
		.src_channel        (router_004_src_channel),                                //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (dma_write_master_agent_cp_ready),                       //      sink.ready
		.sink_valid         (dma_write_master_agent_cp_valid),                       //          .valid
		.sink_data          (dma_write_master_agent_cp_data),                        //          .data
		.sink_startofpacket (dma_write_master_agent_cp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (dma_write_master_agent_cp_endofpacket),                 //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                  //       src.ready
		.src_valid          (router_005_src_valid),                                  //          .valid
		.src_data           (router_005_src_data),                                   //          .data
		.src_channel        (router_005_src_channel),                                //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (dma_lcd_write_master_agent_cp_ready),                   //      sink.ready
		.sink_valid         (dma_lcd_write_master_agent_cp_valid),                   //          .valid
		.sink_data          (dma_lcd_write_master_agent_cp_data),                    //          .data
		.sink_startofpacket (dma_lcd_write_master_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (dma_lcd_write_master_agent_cp_endofpacket),             //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                  //       src.ready
		.src_valid          (router_006_src_valid),                                  //          .valid
		.src_data           (router_006_src_data),                                   //          .data
		.src_channel        (router_006_src_channel),                                //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (sdram_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                      //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	nios_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (ili9341spi_a_slave_agent_rp_ready),                     //      sink.ready
		.sink_valid         (ili9341spi_a_slave_agent_rp_valid),                     //          .valid
		.sink_data          (ili9341spi_a_slave_agent_rp_data),                      //          .data
		.sink_startofpacket (ili9341spi_a_slave_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (ili9341spi_a_slave_agent_rp_endofpacket),               //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                  //       src.ready
		.src_valid          (router_008_src_valid),                                  //          .valid
		.src_data           (router_008_src_data),                                   //          .data
		.src_channel        (router_008_src_channel),                                //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                         //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_009_src_ready),                               //       src.ready
		.src_valid          (router_009_src_valid),                               //          .valid
		.src_data           (router_009_src_data),                                //          .data
		.src_channel        (router_009_src_channel),                             //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                          //          .endofpacket
	);

	nios_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (ft245_avalon_slave_agent_rp_ready),                     //      sink.ready
		.sink_valid         (ft245_avalon_slave_agent_rp_valid),                     //          .valid
		.sink_data          (ft245_avalon_slave_agent_rp_data),                      //          .data
		.sink_startofpacket (ft245_avalon_slave_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (ft245_avalon_slave_agent_rp_endofpacket),               //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                  //       src.ready
		.src_valid          (router_010_src_valid),                                  //          .valid
		.src_data           (router_010_src_data),                                   //          .data
		.src_channel        (router_010_src_channel),                                //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (dma_control_port_slave_agent_rp_ready),                 //      sink.ready
		.sink_valid         (dma_control_port_slave_agent_rp_valid),                 //          .valid
		.sink_data          (dma_control_port_slave_agent_rp_data),                  //          .data
		.sink_startofpacket (dma_control_port_slave_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (dma_control_port_slave_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                  //       src.ready
		.src_valid          (router_011_src_valid),                                  //          .valid
		.src_data           (router_011_src_data),                                   //          .data
		.src_channel        (router_011_src_channel),                                //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_router_011 router_012 (
		.sink_ready         (dma_lcd_control_port_slave_agent_rp_ready),             //      sink.ready
		.sink_valid         (dma_lcd_control_port_slave_agent_rp_valid),             //          .valid
		.sink_data          (dma_lcd_control_port_slave_agent_rp_data),              //          .data
		.sink_startofpacket (dma_lcd_control_port_slave_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (dma_lcd_control_port_slave_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                  //       src.ready
		.src_valid          (router_012_src_valid),                                  //          .valid
		.src_data           (router_012_src_data),                                   //          .data
		.src_channel        (router_012_src_channel),                                //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_router_011 router_013 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),           //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),           //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),            //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),     //          .endofpacket
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                         //       src.ready
		.src_valid          (router_013_src_valid),                         //          .valid
		.src_data           (router_013_src_data),                          //          .data
		.src_channel        (router_013_src_channel),                       //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                    //          .endofpacket
	);

	nios_mm_interconnect_0_router_009 router_014 (
		.sink_ready         (onchip_flash_data_agent_rp_ready),             //      sink.ready
		.sink_valid         (onchip_flash_data_agent_rp_valid),             //          .valid
		.sink_data          (onchip_flash_data_agent_rp_data),              //          .data
		.sink_startofpacket (onchip_flash_data_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (onchip_flash_data_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                         //       src.ready
		.src_valid          (router_014_src_valid),                         //          .valid
		.src_data           (router_014_src_data),                          //          .data
		.src_channel        (router_014_src_channel),                       //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                    //          .endofpacket
	);

	nios_mm_interconnect_0_router_009 router_015 (
		.sink_ready         (nios2_gen2_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                        //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_015_src_ready),                              //       src.ready
		.src_valid          (router_015_src_valid),                              //          .valid
		.src_data           (router_015_src_data),                               //          .data
		.src_channel        (router_015_src_channel),                            //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_router_009 router_016 (
		.sink_ready         (serialflash_epcs_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (serialflash_epcs_control_port_agent_rp_valid),         //          .valid
		.sink_data          (serialflash_epcs_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (serialflash_epcs_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (serialflash_epcs_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                           //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_016_src_ready),                                 //       src.ready
		.src_valid          (router_016_src_valid),                                 //          .valid
		.src_data           (router_016_src_data),                                  //          .data
		.src_channel        (router_016_src_channel),                               //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                            //          .endofpacket
	);

	nios_mm_interconnect_0_router_011 router_017 (
		.sink_ready         (pdm_s0_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (pdm_s0_agent_rp_valid),                                 //          .valid
		.sink_data          (pdm_s0_agent_rp_data),                                  //          .data
		.sink_startofpacket (pdm_s0_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (pdm_s0_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                  //       src.ready
		.src_valid          (router_017_src_valid),                                  //          .valid
		.src_data           (router_017_src_data),                                   //          .data
		.src_channel        (router_017_src_channel),                                //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_router_011 router_018 (
		.sink_ready         (sys_clk_timer_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (sys_clk_timer_s1_agent_rp_valid),              //          .valid
		.sink_data          (sys_clk_timer_s1_agent_rp_data),               //          .data
		.sink_startofpacket (sys_clk_timer_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (sys_clk_timer_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                         //       src.ready
		.src_valid          (router_018_src_valid),                         //          .valid
		.src_data           (router_018_src_data),                          //          .data
		.src_channel        (router_018_src_channel),                       //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                    //          .endofpacket
	);

	nios_mm_interconnect_0_router_011 router_019 (
		.sink_ready         (button_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (button_s1_agent_rp_valid),                     //          .valid
		.sink_data          (button_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (button_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (button_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                         //       src.ready
		.src_valid          (router_019_src_valid),                         //          .valid
		.src_data           (router_019_src_data),                          //          .data
		.src_channel        (router_019_src_channel),                       //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                    //          .endofpacket
	);

	nios_mm_interconnect_0_router_011 router_020 (
		.sink_ready         (debport_s1_agent_rp_ready),                             //      sink.ready
		.sink_valid         (debport_s1_agent_rp_valid),                             //          .valid
		.sink_data          (debport_s1_agent_rp_data),                              //          .data
		.sink_startofpacket (debport_s1_agent_rp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (debport_s1_agent_rp_endofpacket),                       //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                  //       src.ready
		.src_valid          (router_020_src_valid),                                  //          .valid
		.src_data           (router_020_src_data),                                   //          .data
		.src_channel        (router_020_src_channel),                                //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_router_011 router_021 (
		.sink_ready         (led_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (led_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                                  //       src.ready
		.src_valid          (router_021_src_valid),                                  //          .valid
		.src_data           (router_021_src_data),                                   //          .data
		.src_channel        (router_021_src_channel),                                //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                             //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (15),
		.VALID_WIDTH               (15),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) dma_read_master_limiter (
		.clk                    (pll_c0_clk),                                            //       clk.clk
		.reset                  (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                  //          .valid
		.cmd_sink_data          (router_003_src_data),                                   //          .data
		.cmd_sink_channel       (router_003_src_channel),                                //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                          //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                            //          .endofpacket
		.cmd_src_ready          (dma_read_master_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (dma_read_master_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (dma_read_master_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (dma_read_master_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (dma_read_master_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                 //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                               //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                           //          .endofpacket
		.rsp_src_ready          (dma_read_master_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (dma_read_master_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (dma_read_master_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (dma_read_master_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (dma_read_master_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (dma_read_master_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (dma_read_master_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (76),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (68),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (pll_c0_clk),                                   //       cr0.clk
		.reset                 (nios2_gen2_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                             //          .data
		.sink0_channel         (cmd_mux_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                            //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	nios_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                      //      sink.ready
		.sink_channel       (router_src_channel),                                    //          .channel
		.sink_data          (router_src_data),                                       //          .data
		.sink_startofpacket (router_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_src_valid),                                      //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                  //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                  //          .valid
		.src0_data          (cmd_demux_src0_data),                                   //          .data
		.src0_channel       (cmd_demux_src0_channel),                                //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (pll_c0_clk),                                   //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_001_src_ready),                         //      sink.ready
		.sink_channel        (router_001_src_channel),                       //          .channel
		.sink_data           (router_001_src_data),                          //          .data
		.sink_startofpacket  (router_001_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket    (router_001_src_endofpacket),                   //          .endofpacket
		.sink_valid          (router_001_src_valid),                         //          .valid
		.src0_ready          (cmd_demux_001_src0_ready),                     //      src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                     //          .valid
		.src0_data           (cmd_demux_001_src0_data),                      //          .data
		.src0_channel        (cmd_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),               //          .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                     //      src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                     //          .valid
		.src1_data           (cmd_demux_001_src1_data),                      //          .data
		.src1_channel        (cmd_demux_001_src1_channel),                   //          .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),               //          .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                     //      src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                     //          .valid
		.src2_data           (cmd_demux_001_src2_data),                      //          .data
		.src2_channel        (cmd_demux_001_src2_channel),                   //          .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),               //          .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                     //      src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                     //          .valid
		.src3_data           (cmd_demux_001_src3_data),                      //          .data
		.src3_channel        (cmd_demux_001_src3_channel),                   //          .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),             //          .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),               //          .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                     //      src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                     //          .valid
		.src4_data           (cmd_demux_001_src4_data),                      //          .data
		.src4_channel        (cmd_demux_001_src4_channel),                   //          .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),             //          .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),               //          .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                     //      src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                     //          .valid
		.src5_data           (cmd_demux_001_src5_data),                      //          .data
		.src5_channel        (cmd_demux_001_src5_channel),                   //          .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),             //          .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),               //          .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                     //      src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                     //          .valid
		.src6_data           (cmd_demux_001_src6_data),                      //          .data
		.src6_channel        (cmd_demux_001_src6_channel),                   //          .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),             //          .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),               //          .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                     //      src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                     //          .valid
		.src7_data           (cmd_demux_001_src7_data),                      //          .data
		.src7_channel        (cmd_demux_001_src7_channel),                   //          .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),             //          .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),               //          .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                     //      src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                     //          .valid
		.src8_data           (cmd_demux_001_src8_data),                      //          .data
		.src8_channel        (cmd_demux_001_src8_channel),                   //          .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),             //          .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),               //          .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                     //      src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                     //          .valid
		.src9_data           (cmd_demux_001_src9_data),                      //          .data
		.src9_channel        (cmd_demux_001_src9_channel),                   //          .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),             //          .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),               //          .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                    //     src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                    //          .valid
		.src10_data          (cmd_demux_001_src10_data),                     //          .data
		.src10_channel       (cmd_demux_001_src10_channel),                  //          .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),            //          .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),              //          .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                    //     src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                    //          .valid
		.src11_data          (cmd_demux_001_src11_data),                     //          .data
		.src11_channel       (cmd_demux_001_src11_channel),                  //          .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),            //          .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),              //          .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                    //     src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                    //          .valid
		.src12_data          (cmd_demux_001_src12_data),                     //          .data
		.src12_channel       (cmd_demux_001_src12_channel),                  //          .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),            //          .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),              //          .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                    //     src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                    //          .valid
		.src13_data          (cmd_demux_001_src13_data),                     //          .data
		.src13_channel       (cmd_demux_001_src13_channel),                  //          .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),            //          .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),              //          .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                    //     src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                    //          .valid
		.src14_data          (cmd_demux_001_src14_data),                     //          .data
		.src14_channel       (cmd_demux_001_src14_channel),                  //          .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),            //          .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket)               //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //      sink.ready
		.sink_channel       (router_002_src_channel),                       //          .channel
		.sink_data          (router_002_src_data),                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                         //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                     //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                     //          .valid
		.src0_data          (cmd_demux_002_src0_data),                      //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                   //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),               //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                     //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                     //          .valid
		.src1_data          (cmd_demux_002_src1_data),                      //          .data
		.src1_channel       (cmd_demux_002_src1_channel),                   //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),               //          .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                     //      src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                     //          .valid
		.src2_data          (cmd_demux_002_src2_data),                      //          .data
		.src2_channel       (cmd_demux_002_src2_channel),                   //          .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),               //          .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                     //      src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                     //          .valid
		.src3_data          (cmd_demux_002_src3_data),                      //          .data
		.src3_channel       (cmd_demux_002_src3_channel),                   //          .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),             //          .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),               //          .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                     //      src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                     //          .valid
		.src4_data          (cmd_demux_002_src4_data),                      //          .data
		.src4_channel       (cmd_demux_002_src4_channel),                   //          .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),             //          .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket)                //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (pll_c0_clk),                                            //        clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (dma_read_master_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel       (dma_read_master_limiter_cmd_src_channel),               //           .channel
		.sink_data          (dma_read_master_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket (dma_read_master_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket   (dma_read_master_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid         (dma_read_master_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                              //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                              //           .valid
		.src0_data          (cmd_demux_003_src0_data),                               //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                            //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                        //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                              //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                              //           .valid
		.src1_data          (cmd_demux_003_src1_data),                               //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                            //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                         //           .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux_004 cmd_demux_004 (
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                  //      sink.ready
		.sink_channel       (router_004_src_channel),                                //          .channel
		.sink_data          (router_004_src_data),                                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_004_src_valid),                                  //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_004_src0_data),                               //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux_005 cmd_demux_005 (
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                  //      sink.ready
		.sink_channel       (router_005_src_channel),                                //          .channel
		.sink_data          (router_005_src_data),                                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_005_src_valid),                                  //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_005_src0_data),                               //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                              //      src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                              //          .valid
		.src1_data          (cmd_demux_005_src1_data),                               //          .data
		.src1_channel       (cmd_demux_005_src1_channel),                            //          .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux_006 cmd_demux_006 (
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                  //      sink.ready
		.sink_channel       (router_006_src_channel),                                //          .channel
		.sink_data          (router_006_src_data),                                   //          .data
		.sink_startofpacket (router_006_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_006_src_valid),                                  //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_006_src0_data),                               //          .data
		.src0_channel       (cmd_demux_006_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (cmd_demux_006_src1_ready),                              //      src1.ready
		.src1_valid         (cmd_demux_006_src1_valid),                              //          .valid
		.src1_data          (cmd_demux_006_src1_data),                               //          .data
		.src1_channel       (cmd_demux_006_src1_channel),                            //          .channel
		.src1_startofpacket (cmd_demux_006_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (cmd_demux_006_src1_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pll_c0_clk),                                                                    //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                             //          .valid
		.src_data            (cmd_mux_src_data),                                                              //          .data
		.src_channel         (cmd_mux_src_channel),                                                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                       //          .endofpacket
		.sink0_ready         (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_ready),          //     sink0.ready
		.sink0_valid         (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink0_channel       (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink0_data          (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_data),           //          .data
		.sink0_startofpacket (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),    //          .endofpacket
		.sink1_ready         (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_ready),                //     sink1.ready
		.sink1_valid         (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_valid),                //          .valid
		.sink1_channel       (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_channel),              //          .channel
		.sink1_data          (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_data),                 //          .data
		.sink1_startofpacket (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),          //          .endofpacket
		.sink2_ready         (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink2_channel       (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink2_data          (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink2_startofpacket (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink3_ready         (dma_read_master_to_sdram_s1_cmd_width_adapter_src_ready),                       //     sink3.ready
		.sink3_valid         (dma_read_master_to_sdram_s1_cmd_width_adapter_src_valid),                       //          .valid
		.sink3_channel       (dma_read_master_to_sdram_s1_cmd_width_adapter_src_channel),                     //          .channel
		.sink3_data          (dma_read_master_to_sdram_s1_cmd_width_adapter_src_data),                        //          .data
		.sink3_startofpacket (dma_read_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (dma_read_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),                 //          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),                                                      //     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),                                                      //          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),                                                    //          .channel
		.sink4_data          (cmd_demux_004_src0_data),                                                       //          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),                                              //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket),                                                //          .endofpacket
		.sink5_ready         (dma_write_master_to_sdram_s1_cmd_width_adapter_src_ready),                      //     sink5.ready
		.sink5_valid         (dma_write_master_to_sdram_s1_cmd_width_adapter_src_valid),                      //          .valid
		.sink5_channel       (dma_write_master_to_sdram_s1_cmd_width_adapter_src_channel),                    //          .channel
		.sink5_data          (dma_write_master_to_sdram_s1_cmd_width_adapter_src_data),                       //          .data
		.sink5_startofpacket (dma_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.sink5_endofpacket   (dma_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),                //          .endofpacket
		.sink6_ready         (cmd_demux_006_src0_ready),                                                      //     sink6.ready
		.sink6_valid         (cmd_demux_006_src0_valid),                                                      //          .valid
		.sink6_channel       (cmd_demux_006_src0_channel),                                                    //          .channel
		.sink6_data          (cmd_demux_006_src0_data),                                                       //          .data
		.sink6_startofpacket (cmd_demux_006_src0_startofpacket),                                              //          .startofpacket
		.sink6_endofpacket   (cmd_demux_006_src0_endofpacket)                                                 //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (pll_c0_clk),                                                                     //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                          //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                          //          .valid
		.src_data            (cmd_mux_001_src_data),                                                           //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                        //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                                  //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                    //          .endofpacket
		.sink0_ready         (cmd_demux_001_src1_ready),                                                       //     sink0.ready
		.sink0_valid         (cmd_demux_001_src1_valid),                                                       //          .valid
		.sink0_channel       (cmd_demux_001_src1_channel),                                                     //          .channel
		.sink0_data          (cmd_demux_001_src1_data),                                                        //          .data
		.sink0_startofpacket (cmd_demux_001_src1_startofpacket),                                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src1_endofpacket),                                                 //          .endofpacket
		.sink1_ready         (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (pll_c0_clk),                                  //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                       //          .valid
		.src_data            (cmd_mux_002_src_data),                        //          .data
		.src_channel         (cmd_mux_002_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_002_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_002_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_002_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_002_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_002_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src1_endofpacket)               //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (pll_c0_clk),                                            //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                 //          .valid
		.src_data            (cmd_mux_003_src_data),                                  //          .data
		.src_channel         (cmd_mux_003_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                              //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                            //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                               //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                              //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                            //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                               //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket),                        //          .endofpacket
		.sink2_ready         (cmd_demux_005_src1_ready),                              //     sink2.ready
		.sink2_valid         (cmd_demux_005_src1_valid),                              //          .valid
		.sink2_channel       (cmd_demux_005_src1_channel),                            //          .channel
		.sink2_data          (cmd_demux_005_src1_data),                               //          .data
		.sink2_startofpacket (cmd_demux_005_src1_startofpacket),                      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_005_src1_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (pll_c0_clk),                                            //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                 //          .valid
		.src_data            (cmd_mux_004_src_data),                                  //          .data
		.src_channel         (cmd_mux_004_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                              //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                            //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                               //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_004 cmd_mux_005 (
		.clk                 (pll_c0_clk),                                            //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                 //          .valid
		.src_data            (cmd_mux_005_src_data),                                  //          .data
		.src_channel         (cmd_mux_005_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                              //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),                            //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                               //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_004 cmd_mux_006 (
		.clk                 (pll_c0_clk),                                   //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                        //          .valid
		.src_data            (cmd_mux_006_src_data),                         //          .data
		.src_channel         (cmd_mux_006_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket)                //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_001 cmd_mux_007 (
		.clk                 (pll_c0_clk),                                   //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                        //          .valid
		.src_data            (cmd_mux_007_src_data),                         //          .data
		.src_channel         (cmd_mux_007_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_002_src2_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_002_src2_valid),                     //          .valid
		.sink1_channel       (cmd_demux_002_src2_channel),                   //          .channel
		.sink1_data          (cmd_demux_002_src2_data),                      //          .data
		.sink1_startofpacket (cmd_demux_002_src2_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src2_endofpacket)                //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_001 cmd_mux_008 (
		.clk                 (pll_c0_clk),                                   //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                        //          .valid
		.src_data            (cmd_mux_008_src_data),                         //          .data
		.src_channel         (cmd_mux_008_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_002_src3_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_002_src3_valid),                     //          .valid
		.sink1_channel       (cmd_demux_002_src3_channel),                   //          .channel
		.sink1_data          (cmd_demux_002_src3_data),                      //          .data
		.sink1_startofpacket (cmd_demux_002_src3_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src3_endofpacket)                //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_001 cmd_mux_009 (
		.clk                 (pll_c0_clk),                                   //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                        //          .valid
		.src_data            (cmd_mux_009_src_data),                         //          .data
		.src_channel         (cmd_mux_009_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_002_src4_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_002_src4_valid),                     //          .valid
		.sink1_channel       (cmd_demux_002_src4_channel),                   //          .channel
		.sink1_data          (cmd_demux_002_src4_data),                      //          .data
		.sink1_startofpacket (cmd_demux_002_src4_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src4_endofpacket)                //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_004 cmd_mux_010 (
		.clk                 (pll_c0_clk),                                            //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                 //          .valid
		.src_data            (cmd_mux_010_src_data),                                  //          .data
		.src_channel         (cmd_mux_010_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),                             //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),                           //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                              //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket)                        //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_004 cmd_mux_011 (
		.clk                 (pll_c0_clk),                                   //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                        //          .valid
		.src_data            (cmd_mux_011_src_data),                         //          .data
		.src_channel         (cmd_mux_011_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src11_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src11_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src11_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src11_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src11_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src11_endofpacket)               //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_004 cmd_mux_012 (
		.clk                 (pll_c0_clk),                                   //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                        //          .valid
		.src_data            (cmd_mux_012_src_data),                         //          .data
		.src_channel         (cmd_mux_012_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src12_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src12_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src12_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src12_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src12_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src12_endofpacket)               //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_004 cmd_mux_013 (
		.clk                 (pll_c0_clk),                                            //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                 //          .valid
		.src_data            (cmd_mux_013_src_data),                                  //          .data
		.src_channel         (cmd_mux_013_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_001_src13_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_001_src13_valid),                             //          .valid
		.sink0_channel       (cmd_demux_001_src13_channel),                           //          .channel
		.sink0_data          (cmd_demux_001_src13_data),                              //          .data
		.sink0_startofpacket (cmd_demux_001_src13_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src13_endofpacket)                        //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_mux_004 cmd_mux_014 (
		.clk                 (pll_c0_clk),                                            //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                 //          .valid
		.src_data            (cmd_mux_014_src_data),                                  //          .data
		.src_channel         (cmd_mux_014_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_001_src14_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_001_src14_valid),                             //          .valid
		.sink0_channel       (cmd_demux_001_src14_channel),                           //          .channel
		.sink0_data          (cmd_demux_001_src14_data),                              //          .data
		.sink0_startofpacket (cmd_demux_001_src14_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src14_endofpacket)                        //          .endofpacket
	);

	nios_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                         //      sink.ready
		.sink_channel       (router_007_src_channel),                       //          .channel
		.sink_data          (router_007_src_data),                          //          .data
		.sink_startofpacket (router_007_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_007_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_src1_data),                          //          .data
		.src1_channel       (rsp_demux_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_src2_data),                          //          .data
		.src2_channel       (rsp_demux_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                   //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                         //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                         //          .valid
		.src3_data          (rsp_demux_src3_data),                          //          .data
		.src3_channel       (rsp_demux_src3_channel),                       //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket),                   //          .endofpacket
		.src4_ready         (rsp_demux_src4_ready),                         //      src4.ready
		.src4_valid         (rsp_demux_src4_valid),                         //          .valid
		.src4_data          (rsp_demux_src4_data),                          //          .data
		.src4_channel       (rsp_demux_src4_channel),                       //          .channel
		.src4_startofpacket (rsp_demux_src4_startofpacket),                 //          .startofpacket
		.src4_endofpacket   (rsp_demux_src4_endofpacket),                   //          .endofpacket
		.src5_ready         (rsp_demux_src5_ready),                         //      src5.ready
		.src5_valid         (rsp_demux_src5_valid),                         //          .valid
		.src5_data          (rsp_demux_src5_data),                          //          .data
		.src5_channel       (rsp_demux_src5_channel),                       //          .channel
		.src5_startofpacket (rsp_demux_src5_startofpacket),                 //          .startofpacket
		.src5_endofpacket   (rsp_demux_src5_endofpacket),                   //          .endofpacket
		.src6_ready         (rsp_demux_src6_ready),                         //      src6.ready
		.src6_valid         (rsp_demux_src6_valid),                         //          .valid
		.src6_data          (rsp_demux_src6_data),                          //          .data
		.src6_channel       (rsp_demux_src6_channel),                       //          .channel
		.src6_startofpacket (rsp_demux_src6_startofpacket),                 //          .startofpacket
		.src6_endofpacket   (rsp_demux_src6_endofpacket)                    //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux_005 rsp_demux_001 (
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                  //      sink.ready
		.sink_channel       (router_008_src_channel),                                //          .channel
		.sink_data          (router_008_src_data),                                   //          .data
		.sink_startofpacket (router_008_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_008_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_001_src0_data),                               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_001_src1_data),                               //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux_005 rsp_demux_002 (
		.clk                (pll_c0_clk),                                  //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                        //      sink.ready
		.sink_channel       (router_009_src_channel),                      //          .channel
		.sink_data          (router_009_src_data),                         //          .data
		.sink_startofpacket (router_009_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_009_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_002_src0_data),                     //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_002_src1_data),                     //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)               //          .endofpacket
	);

	nios_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                  //      sink.ready
		.sink_channel       (router_010_src_channel),                                //          .channel
		.sink_data          (router_010_src_data),                                   //          .data
		.sink_startofpacket (router_010_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_010_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_003_src0_data),                               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_003_src1_data),                               //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                        //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                              //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                              //          .valid
		.src2_data          (rsp_demux_003_src2_data),                               //          .data
		.src2_channel       (rsp_demux_003_src2_channel),                            //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),                      //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux rsp_demux_004 (
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                  //      sink.ready
		.sink_channel       (router_011_src_channel),                                //          .channel
		.sink_data          (router_011_src_data),                                   //          .data
		.sink_startofpacket (router_011_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_011_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_004_src0_data),                               //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux rsp_demux_005 (
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                  //      sink.ready
		.sink_channel       (router_012_src_channel),                                //          .channel
		.sink_data          (router_012_src_data),                                   //          .data
		.sink_startofpacket (router_012_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_012_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_005_src0_data),                               //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux rsp_demux_006 (
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                         //      sink.ready
		.sink_channel       (router_013_src_channel),                       //          .channel
		.sink_data          (router_013_src_data),                          //          .data
		.sink_startofpacket (router_013_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_013_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_006_src0_data),                      //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux_005 rsp_demux_007 (
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                         //      sink.ready
		.sink_channel       (router_014_src_channel),                       //          .channel
		.sink_data          (router_014_src_data),                          //          .data
		.sink_startofpacket (router_014_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_014_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_007_src0_data),                      //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_007_src1_data),                      //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux_005 rsp_demux_008 (
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                         //      sink.ready
		.sink_channel       (router_015_src_channel),                       //          .channel
		.sink_data          (router_015_src_data),                          //          .data
		.sink_startofpacket (router_015_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_015_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_008_src0_data),                      //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_008_src1_data),                      //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux_005 rsp_demux_009 (
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                         //      sink.ready
		.sink_channel       (router_016_src_channel),                       //          .channel
		.sink_data          (router_016_src_data),                          //          .data
		.sink_startofpacket (router_016_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_016_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_009_src0_data),                      //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_009_src1_data),                      //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux rsp_demux_010 (
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                  //      sink.ready
		.sink_channel       (router_017_src_channel),                                //          .channel
		.sink_data          (router_017_src_data),                                   //          .data
		.sink_startofpacket (router_017_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_017_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_010_src0_data),                               //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux rsp_demux_011 (
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                         //      sink.ready
		.sink_channel       (router_018_src_channel),                       //          .channel
		.sink_data          (router_018_src_data),                          //          .data
		.sink_startofpacket (router_018_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_018_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_011_src0_data),                      //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux rsp_demux_012 (
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                         //      sink.ready
		.sink_channel       (router_019_src_channel),                       //          .channel
		.sink_data          (router_019_src_data),                          //          .data
		.sink_startofpacket (router_019_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_019_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_012_src0_data),                      //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux rsp_demux_013 (
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                                  //      sink.ready
		.sink_channel       (router_020_src_channel),                                //          .channel
		.sink_data          (router_020_src_data),                                   //          .data
		.sink_startofpacket (router_020_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_020_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_013_src0_data),                               //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_cmd_demux rsp_demux_014 (
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                                  //      sink.ready
		.sink_channel       (router_021_src_channel),                                //          .channel
		.sink_data          (router_021_src_data),                                   //          .data
		.sink_startofpacket (router_021_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_021_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_014_src0_data),                               //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                         //          .endofpacket
	);

	nios_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (pll_c0_clk),                                                                   //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                            //          .valid
		.src_data            (rsp_mux_src_data),                                                             //          .data
		.src_channel         (rsp_mux_src_channel),                                                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                      //          .endofpacket
		.sink0_ready         (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (pll_c0_clk),                                                             //       clk.clk
		.reset                (nios2_gen2_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                                  //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                                  //          .valid
		.src_data             (rsp_mux_001_src_data),                                                   //          .data
		.src_channel          (rsp_mux_001_src_channel),                                                //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                            //          .endofpacket
		.sink0_ready          (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid          (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel        (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data           (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket  (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket    (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                               //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                               //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                             //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                       //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                         //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                               //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                               //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                             //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                       //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                         //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                               //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                               //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                             //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                       //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                         //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                               //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                               //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                             //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                       //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                         //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                               //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                               //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                             //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                       //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                         //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                               //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                               //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                             //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                       //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                         //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                               //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                               //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                             //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                       //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                         //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                               //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                               //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                             //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                       //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                         //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                               //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                               //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                             //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                       //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                         //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                               //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                               //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                             //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                       //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                         //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                               //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                               //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                             //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                                //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                       //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                         //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                               //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                               //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                             //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                                //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                       //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                         //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                               //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                               //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                             //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                                //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                       //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                         //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                               //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                               //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                             //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                                //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                       //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket)                                          //          .endofpacket
	);

	nios_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (pll_c0_clk),                                                                    //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                         //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                         //          .valid
		.src_data            (rsp_mux_002_src_data),                                                          //          .data
		.src_channel         (rsp_mux_002_src_channel),                                                       //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                                   //          .endofpacket
		.sink0_ready         (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                                                      //     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                                                      //          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                                                    //          .channel
		.sink1_data          (rsp_demux_002_src1_data),                                                       //          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),                                              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket),                                                //          .endofpacket
		.sink2_ready         (rsp_demux_007_src1_ready),                                                      //     sink2.ready
		.sink2_valid         (rsp_demux_007_src1_valid),                                                      //          .valid
		.sink2_channel       (rsp_demux_007_src1_channel),                                                    //          .channel
		.sink2_data          (rsp_demux_007_src1_data),                                                       //          .data
		.sink2_startofpacket (rsp_demux_007_src1_startofpacket),                                              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_007_src1_endofpacket),                                                //          .endofpacket
		.sink3_ready         (rsp_demux_008_src1_ready),                                                      //     sink3.ready
		.sink3_valid         (rsp_demux_008_src1_valid),                                                      //          .valid
		.sink3_channel       (rsp_demux_008_src1_channel),                                                    //          .channel
		.sink3_data          (rsp_demux_008_src1_data),                                                       //          .data
		.sink3_startofpacket (rsp_demux_008_src1_startofpacket),                                              //          .startofpacket
		.sink3_endofpacket   (rsp_demux_008_src1_endofpacket),                                                //          .endofpacket
		.sink4_ready         (rsp_demux_009_src1_ready),                                                      //     sink4.ready
		.sink4_valid         (rsp_demux_009_src1_valid),                                                      //          .valid
		.sink4_channel       (rsp_demux_009_src1_channel),                                                    //          .channel
		.sink4_data          (rsp_demux_009_src1_data),                                                       //          .data
		.sink4_startofpacket (rsp_demux_009_src1_startofpacket),                                              //          .startofpacket
		.sink4_endofpacket   (rsp_demux_009_src1_endofpacket)                                                 //          .endofpacket
	);

	nios_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (pll_c0_clk),                                                      //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                           //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                           //          .valid
		.src_data            (rsp_mux_003_src_data),                                            //          .data
		.src_channel         (rsp_mux_003_src_channel),                                         //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (sdram_s1_to_dma_read_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_dma_read_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_dma_read_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_dma_read_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_dma_read_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_dma_read_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_003_src1_ready),                                        //     sink1.ready
		.sink1_valid         (rsp_demux_003_src1_valid),                                        //          .valid
		.sink1_channel       (rsp_demux_003_src1_channel),                                      //          .channel
		.sink1_data          (rsp_demux_003_src1_data),                                         //          .data
		.sink1_startofpacket (rsp_demux_003_src1_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src1_endofpacket)                                   //          .endofpacket
	);

	nios_mm_interconnect_0_rsp_mux_004 rsp_mux_004 (
		.clk                 (pll_c0_clk),                                            //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                 //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                 //          .valid
		.src_data            (rsp_mux_004_src_data),                                  //          .data
		.src_channel         (rsp_mux_004_src_channel),                               //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (rsp_demux_src4_ready),                                  //     sink0.ready
		.sink0_valid         (rsp_demux_src4_valid),                                  //          .valid
		.sink0_channel       (rsp_demux_src4_channel),                                //          .channel
		.sink0_data          (rsp_demux_src4_data),                                   //          .data
		.sink0_startofpacket (rsp_demux_src4_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src4_endofpacket)                             //          .endofpacket
	);

	nios_mm_interconnect_0_rsp_mux_003 rsp_mux_005 (
		.clk                 (pll_c0_clk),                                                       //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                            //          .valid
		.src_data            (rsp_mux_005_src_data),                                             //          .data
		.src_channel         (rsp_mux_005_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (sdram_s1_to_dma_write_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_dma_write_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_dma_write_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_dma_write_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_dma_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_dma_write_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_003_src2_ready),                                         //     sink1.ready
		.sink1_valid         (rsp_demux_003_src2_valid),                                         //          .valid
		.sink1_channel       (rsp_demux_003_src2_channel),                                       //          .channel
		.sink1_data          (rsp_demux_003_src2_data),                                          //          .data
		.sink1_startofpacket (rsp_demux_003_src2_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src2_endofpacket)                                    //          .endofpacket
	);

	nios_mm_interconnect_0_rsp_mux_006 rsp_mux_006 (
		.clk                 (pll_c0_clk),                                                                     //       clk.clk
		.reset               (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                                                          //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                                                          //          .valid
		.src_data            (rsp_mux_006_src_data),                                                           //          .data
		.src_channel         (rsp_mux_006_src_channel),                                                        //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                                                  //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                                                    //          .endofpacket
		.sink0_ready         (rsp_demux_src6_ready),                                                           //     sink0.ready
		.sink0_valid         (rsp_demux_src6_valid),                                                           //          .valid
		.sink0_channel       (rsp_demux_src6_channel),                                                         //          .channel
		.sink0_data          (rsp_demux_src6_data),                                                            //          .data
		.sink0_startofpacket (rsp_demux_src6_startofpacket),                                                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src6_endofpacket),                                                     //          .endofpacket
		.sink1_ready         (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (86),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (89),
		.IN_PKT_BURST_SIZE_L           (87),
		.IN_PKT_RESPONSE_STATUS_H      (113),
		.IN_PKT_RESPONSE_STATUS_L      (112),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (91),
		.IN_PKT_BURST_TYPE_L           (90),
		.IN_PKT_ORI_BURST_SIZE_L       (114),
		.IN_PKT_ORI_BURST_SIZE_H       (116),
		.IN_ST_DATA_W                  (117),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (71),
		.OUT_PKT_BURST_SIZE_L          (69),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (73),
		.OUT_PKT_BURST_TYPE_L          (72),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (pll_c0_clk),                                                                   //       clk.clk
		.reset                (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                         //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                       //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                   //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                         //          .ready
		.in_data              (cmd_demux_src0_data),                                                          //          .data
		.out_endofpacket      (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (av_wr_master_0_avalon_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (86),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (89),
		.IN_PKT_BURST_SIZE_L           (87),
		.IN_PKT_RESPONSE_STATUS_H      (113),
		.IN_PKT_RESPONSE_STATUS_L      (112),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (91),
		.IN_PKT_BURST_TYPE_L           (90),
		.IN_PKT_ORI_BURST_SIZE_L       (114),
		.IN_PKT_ORI_BURST_SIZE_H       (116),
		.IN_ST_DATA_W                  (117),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (71),
		.OUT_PKT_BURST_SIZE_L          (69),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (73),
		.OUT_PKT_BURST_TYPE_L          (72),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (pll_c0_clk),                                                             //       clk.clk
		.reset                (nios2_gen2_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                               //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                             //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                         //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                               //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                //          .data
		.out_endofpacket      (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_gen2_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (86),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (89),
		.IN_PKT_BURST_SIZE_L           (87),
		.IN_PKT_RESPONSE_STATUS_H      (113),
		.IN_PKT_RESPONSE_STATUS_L      (112),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (91),
		.IN_PKT_BURST_TYPE_L           (90),
		.IN_PKT_ORI_BURST_SIZE_L       (114),
		.IN_PKT_ORI_BURST_SIZE_H       (116),
		.IN_ST_DATA_W                  (117),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (71),
		.OUT_PKT_BURST_SIZE_L          (69),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (73),
		.OUT_PKT_BURST_TYPE_L          (72),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (pll_c0_clk),                                                                    //       clk.clk
		.reset                (nios2_gen2_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                                      //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                                    //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                                //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                                      //          .ready
		.in_data              (cmd_demux_002_src0_data),                                                       //          .data
		.out_endofpacket      (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_gen2_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (86),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (89),
		.IN_PKT_BURST_SIZE_L           (87),
		.IN_PKT_RESPONSE_STATUS_H      (113),
		.IN_PKT_RESPONSE_STATUS_L      (112),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (91),
		.IN_PKT_BURST_TYPE_L           (90),
		.IN_PKT_ORI_BURST_SIZE_L       (114),
		.IN_PKT_ORI_BURST_SIZE_H       (116),
		.IN_ST_DATA_W                  (117),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (71),
		.OUT_PKT_BURST_SIZE_L          (69),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (73),
		.OUT_PKT_BURST_TYPE_L          (72),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_read_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (pll_c0_clk),                                                      //       clk.clk
		.reset                (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (cmd_demux_003_src0_valid),                                        //      sink.valid
		.in_channel           (cmd_demux_003_src0_channel),                                      //          .channel
		.in_startofpacket     (cmd_demux_003_src0_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src0_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_demux_003_src0_ready),                                        //          .ready
		.in_data              (cmd_demux_003_src0_data),                                         //          .data
		.out_endofpacket      (dma_read_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_read_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_read_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_read_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_read_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_read_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (86),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (89),
		.IN_PKT_BURST_SIZE_L           (87),
		.IN_PKT_RESPONSE_STATUS_H      (113),
		.IN_PKT_RESPONSE_STATUS_L      (112),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (91),
		.IN_PKT_BURST_TYPE_L           (90),
		.IN_PKT_ORI_BURST_SIZE_L       (114),
		.IN_PKT_ORI_BURST_SIZE_H       (116),
		.IN_ST_DATA_W                  (117),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (71),
		.OUT_PKT_BURST_SIZE_L          (69),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (73),
		.OUT_PKT_BURST_TYPE_L          (72),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_write_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (pll_c0_clk),                                                       //       clk.clk
		.reset                (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (cmd_demux_005_src0_valid),                                         //      sink.valid
		.in_channel           (cmd_demux_005_src0_channel),                                       //          .channel
		.in_startofpacket     (cmd_demux_005_src0_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_005_src0_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_demux_005_src0_ready),                                         //          .ready
		.in_data              (cmd_demux_005_src0_data),                                          //          .data
		.out_endofpacket      (dma_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_write_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_write_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_write_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_write_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (68),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (71),
		.IN_PKT_BURST_SIZE_L           (69),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (73),
		.IN_PKT_BURST_TYPE_L           (72),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (89),
		.OUT_PKT_BURST_SIZE_L          (87),
		.OUT_PKT_RESPONSE_STATUS_H     (113),
		.OUT_PKT_RESPONSE_STATUS_L     (112),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (91),
		.OUT_PKT_BURST_TYPE_L          (90),
		.OUT_PKT_ORI_BURST_SIZE_L      (114),
		.OUT_PKT_ORI_BURST_SIZE_H      (116),
		.OUT_ST_DATA_W                 (117),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter (
		.clk                  (pll_c0_clk),                                                                     //       clk.clk
		.reset                (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (cmd_demux_006_src1_valid),                                                       //      sink.valid
		.in_channel           (cmd_demux_006_src1_channel),                                                     //          .channel
		.in_startofpacket     (cmd_demux_006_src1_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (cmd_demux_006_src1_endofpacket),                                                 //          .endofpacket
		.in_ready             (cmd_demux_006_src1_ready),                                                       //          .ready
		.in_data              (cmd_demux_006_src1_data),                                                        //          .data
		.out_endofpacket      (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_lcd_write_master_to_ili9341spi_a_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (68),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (71),
		.IN_PKT_BURST_SIZE_L           (69),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (73),
		.IN_PKT_BURST_TYPE_L           (72),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (89),
		.OUT_PKT_BURST_SIZE_L          (87),
		.OUT_PKT_RESPONSE_STATUS_H     (113),
		.OUT_PKT_RESPONSE_STATUS_L     (112),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (91),
		.OUT_PKT_BURST_TYPE_L          (90),
		.OUT_PKT_ORI_BURST_SIZE_L      (114),
		.OUT_PKT_ORI_BURST_SIZE_H      (116),
		.OUT_ST_DATA_W                 (117),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter (
		.clk                  (pll_c0_clk),                                                                   //       clk.clk
		.reset                (nios2_gen2_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                         //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                       //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                   //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                         //          .ready
		.in_data              (rsp_demux_src0_data),                                                          //          .data
		.out_endofpacket      (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_av_wr_master_0_avalon_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (68),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (71),
		.IN_PKT_BURST_SIZE_L           (69),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (73),
		.IN_PKT_BURST_TYPE_L           (72),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (89),
		.OUT_PKT_BURST_SIZE_L          (87),
		.OUT_PKT_RESPONSE_STATUS_H     (113),
		.OUT_PKT_RESPONSE_STATUS_L     (112),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (91),
		.OUT_PKT_BURST_TYPE_L          (90),
		.OUT_PKT_ORI_BURST_SIZE_L      (114),
		.OUT_PKT_ORI_BURST_SIZE_H      (116),
		.OUT_ST_DATA_W                 (117),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter (
		.clk                  (pll_c0_clk),                                                             //       clk.clk
		.reset                (nios2_gen2_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                   //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                 //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                             //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                   //          .ready
		.in_data              (rsp_demux_src1_data),                                                    //          .data
		.out_endofpacket      (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_nios2_gen2_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (68),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (71),
		.IN_PKT_BURST_SIZE_L           (69),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (73),
		.IN_PKT_BURST_TYPE_L           (72),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (89),
		.OUT_PKT_BURST_SIZE_L          (87),
		.OUT_PKT_RESPONSE_STATUS_H     (113),
		.OUT_PKT_RESPONSE_STATUS_L     (112),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (91),
		.OUT_PKT_BURST_TYPE_L          (90),
		.OUT_PKT_ORI_BURST_SIZE_L      (114),
		.OUT_PKT_ORI_BURST_SIZE_H      (116),
		.OUT_ST_DATA_W                 (117),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter (
		.clk                  (pll_c0_clk),                                                                    //       clk.clk
		.reset                (nios2_gen2_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (rsp_demux_src2_valid),                                                          //      sink.valid
		.in_channel           (rsp_demux_src2_channel),                                                        //          .channel
		.in_startofpacket     (rsp_demux_src2_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_src2_endofpacket),                                                    //          .endofpacket
		.in_ready             (rsp_demux_src2_ready),                                                          //          .ready
		.in_data              (rsp_demux_src2_data),                                                           //          .data
		.out_endofpacket      (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_nios2_gen2_instruction_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (68),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (71),
		.IN_PKT_BURST_SIZE_L           (69),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (73),
		.IN_PKT_BURST_TYPE_L           (72),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (89),
		.OUT_PKT_BURST_SIZE_L          (87),
		.OUT_PKT_RESPONSE_STATUS_H     (113),
		.OUT_PKT_RESPONSE_STATUS_L     (112),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (91),
		.OUT_PKT_BURST_TYPE_L          (90),
		.OUT_PKT_ORI_BURST_SIZE_L      (114),
		.OUT_PKT_ORI_BURST_SIZE_H      (116),
		.OUT_ST_DATA_W                 (117),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_dma_read_master_rsp_width_adapter (
		.clk                  (pll_c0_clk),                                                      //       clk.clk
		.reset                (nios2_gen2_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (rsp_demux_src3_valid),                                            //      sink.valid
		.in_channel           (rsp_demux_src3_channel),                                          //          .channel
		.in_startofpacket     (rsp_demux_src3_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_src3_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_demux_src3_ready),                                            //          .ready
		.in_data              (rsp_demux_src3_data),                                             //          .data
		.out_endofpacket      (sdram_s1_to_dma_read_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_dma_read_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_dma_read_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_dma_read_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_dma_read_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_dma_read_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (68),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (71),
		.IN_PKT_BURST_SIZE_L           (69),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (73),
		.IN_PKT_BURST_TYPE_L           (72),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (89),
		.OUT_PKT_BURST_SIZE_L          (87),
		.OUT_PKT_RESPONSE_STATUS_H     (113),
		.OUT_PKT_RESPONSE_STATUS_L     (112),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (91),
		.OUT_PKT_BURST_TYPE_L          (90),
		.OUT_PKT_ORI_BURST_SIZE_L      (114),
		.OUT_PKT_ORI_BURST_SIZE_H      (116),
		.OUT_ST_DATA_W                 (117),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_dma_write_master_rsp_width_adapter (
		.clk                  (pll_c0_clk),                                                       //       clk.clk
		.reset                (nios2_gen2_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_valid             (rsp_demux_src5_valid),                                             //      sink.valid
		.in_channel           (rsp_demux_src5_channel),                                           //          .channel
		.in_startofpacket     (rsp_demux_src5_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_src5_endofpacket),                                       //          .endofpacket
		.in_ready             (rsp_demux_src5_ready),                                             //          .ready
		.in_data              (rsp_demux_src5_data),                                              //          .data
		.out_endofpacket      (sdram_s1_to_dma_write_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_dma_write_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_dma_write_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_dma_write_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_dma_write_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_dma_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (86),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (89),
		.IN_PKT_BURST_SIZE_L           (87),
		.IN_PKT_RESPONSE_STATUS_H      (113),
		.IN_PKT_RESPONSE_STATUS_L      (112),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (91),
		.IN_PKT_BURST_TYPE_L           (90),
		.IN_PKT_ORI_BURST_SIZE_L       (114),
		.IN_PKT_ORI_BURST_SIZE_H       (116),
		.IN_ST_DATA_W                  (117),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (71),
		.OUT_PKT_BURST_SIZE_L          (69),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (73),
		.OUT_PKT_BURST_TYPE_L          (72),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter (
		.clk                  (pll_c0_clk),                                                                     //       clk.clk
		.reset                (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (rsp_demux_001_src1_valid),                                                       //      sink.valid
		.in_channel           (rsp_demux_001_src1_channel),                                                     //          .channel
		.in_startofpacket     (rsp_demux_001_src1_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src1_endofpacket),                                                 //          .endofpacket
		.in_ready             (rsp_demux_001_src1_ready),                                                       //          .ready
		.in_data              (rsp_demux_001_src1_data),                                                        //          .data
		.out_endofpacket      (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ili9341spi_a_slave_to_dma_lcd_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	nios_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                 //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_c0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ili9341spi_a_slave_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (ili9341spi_a_slave_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (ili9341spi_a_slave_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_c0_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                       //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_c0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ft245_avalon_slave_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (ft245_avalon_slave_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (ft245_avalon_slave_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                      //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_c0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dma_control_port_slave_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (dma_control_port_slave_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (dma_control_port_slave_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                      //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_c0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dma_lcd_control_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_lcd_control_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_lcd_control_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                      //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)               //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_flash_data_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_flash_data_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_flash_data_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)             //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (pll_c0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                      //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (pll_c0_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (serialflash_epcs_control_port_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (serialflash_epcs_control_port_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (serialflash_epcs_control_port_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                         //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (pll_c0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pdm_s0_agent_rdata_fifo_src_data),                      //     in_0.data
		.in_0_valid     (pdm_s0_agent_rdata_fifo_src_valid),                     //         .valid
		.in_0_ready     (pdm_s0_agent_rdata_fifo_src_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                      //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sys_clk_timer_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (sys_clk_timer_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (sys_clk_timer_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)             //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (button_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (button_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)             //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (pll_c0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (debport_s1_agent_rdata_fifo_src_data),                  //     in_0.data
		.in_0_valid     (debport_s1_agent_rdata_fifo_src_valid),                 //         .valid
		.in_0_ready     (debport_s1_agent_rdata_fifo_src_ready),                 //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                      //         .error
	);

	nios_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (pll_c0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (av_wr_master_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),                      //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),                     //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                      //         .error
	);

endmodule
